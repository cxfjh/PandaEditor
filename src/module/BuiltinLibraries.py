AutomationLibrary='\n_C=\'middle\'\n_B=False\n_A=None\nimport time,pyautogui,pyperclip\npyautogui.FAILSAFE=_B\ndef click(clicks=1,interval=0,x=_A,y=_A,button=\'左\'):\n\tC=interval;B=clicks\n\ttry:\n\t\tD={\'左\':\'left\',\'右\':\'right\',\'中\':_C};A=D.get(button)\n\t\tif A:\n\t\t\tif x is _A and y is _A:pyautogui.click(clicks=B,interval=C,button=A)\n\t\t\telse:pyautogui.click(x,y,clicks=B,interval=C,button=A)\n\texcept Exception as E:print(f"鼠标单击时发生错误: {E}")\ndef move(x,y,moveType=\'屏幕\'):\n\tA=moveType\n\ttry:\n\t\tif A==\'屏幕\':pyautogui.moveTo(x,y)\n\t\telif A==\'相对\':pyautogui.move(x,y,duration=0,tween=pyautogui.linear)\n\texcept Exception as B:print(f"鼠标移动时发生错误: {B}")\ndef scroll(clicks=1):\n\ttry:pyautogui.scroll(clicks)\n\texcept Exception as A:print(f"鼠标滚轮滚动时发生错误: {A}")\ndef press(action=\'按下\',button=\'左\'):\n\ttry:\n\t\tB={\'左\':\'left\',\'右\':\'right\',\'中\':_C};A=B.get(button)\n\t\tif A:\n\t\t\tif action==\'按下\':pyautogui.mouseDown(button=A)\n\t\t\telse:pyautogui.mouseUp(button=A)\n\texcept Exception as C:print(f"鼠标按下时发生错误: {C}")\ndef keyPress(*A):\n\ttry:pyautogui.hotkey(*A)\n\texcept Exception as B:print(f"键盘按下时发生错误: {B}")\ndef keyInput(text=\'\',index=1,interval=0):\n\tA=index\n\ttry:\n\t\tfor B in range(0,len(text),A):pyperclip.copy(text[B:B+A]);pyautogui.hotkey(\'ctrl\',\'v\');time.sleep(interval)\n\texcept Exception as C:print(f"键盘输入时发生错误: {C}")\ndef AutomationLibrary(operation,*C):\n\tA=operation;D={\'鼠标单击\':click,\'鼠标移动\':move,\'鼠标滚轮\':scroll,\'鼠标操作\':press,\'键盘操作\':keyPress,\'键盘输入\':keyInput,\'帮助\':AutomationLibrary}\n\ttry:\n\t\tB=D.get(A)\n\t\tif B:return B(*C)\n\t\telse:print(f"未知的自动化操作: {A}");return _B\n\texcept Exception as E:print(f"执行自动化操作 {A} 时发生错误: {E}");return _B\ndef helpAutomationLibrary():print(\'\\n\'+\'=\'*60+\'自动化库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了一个函数, 自动化*, 用于执行各种类型的自动化操作。\\n\\n自动化* 支持的操作类型包括:\\n1.鼠标单击\\n2.鼠标移动\\n3.鼠标滚轮\\n4.鼠标操作\\n5.键盘操作\\n6.键盘输入\\n7.帮助\\n\\n使用方法:\\n导入该库: @自动化库\\n\\n1.鼠标单击: 自动化*(\'鼠标单击\', 点击次数(默认1), 间隔时间(默认0), x坐标(默认None), y坐标(默认None), 按钮(默认\'左\', 可选\'左/右/中\'))\\n代码演示: 自动化*(\'鼠标单击\', 2, 0.5, 100, 100, \'左\')\\n运行结果: 鼠标单击屏幕坐标(100, 100) 2次, 间隔0.5秒, 鼠标右键单击\\n\\n2.鼠标移动: 自动化*(\'鼠标移动\', x坐标, y坐标, 移动类型(默认\'屏幕\', 可选\'屏幕/相对\'))\\n代码演示: 自动化*(\'鼠标移动\', 100, 100, \'相对\')\\n运行结果: 鼠标相对自己位置移动(100, 100)\\n\\n3.鼠标滚轮: 自动化*(\'鼠标滚轮\', 滚动次数(默认1))\\n代码演示: 自动化*(\'鼠标滚轮\', -100)\\n运行结果: 鼠标滚轮滚动向下100次\\n\\n4.鼠标操作: 自动化*(\'鼠标操作\', 操作(默认\'按下\', 可选\'按下/松开\'), 按钮(默认\'左\', 可选\'左/右/中\'))\\n代码演示: 自动化*(\'鼠标操作\', \'松开\', \'右\')\\n运行结果: 鼠标右键松开\\n\\n5.键盘操作: 自动化*(\'键盘操作\', 按键)\\n代码演示: 自动化*(\'键盘操作\', \'ctrl\', \'c\')\\n运行结果: 按下ctrl和c键\\n\\n6.键盘输入: 自动化*(\'键盘输入\', 输入内容, 输入速度(默认1), 间隔时间(默认0)\\n代码演示: 自动化*(\'键盘输入\', \'hello world\', 2, 0.1)\\n运行结果: 输入\'hello world\' 每次输出2个字符, 每次间隔0.1秒\\n\\n7.帮助: 自动化*(\'帮助\')\\n代码演示: 自动化*(\'帮助\')\\n运行结果: 显示该帮助文档\\n\\n注: 坐标系以左上角为原点, x轴向右为正, y轴向下为正, 坐标单位为像素。\\n\\n")\n'
DocumentLibrary='\n_C=\'utf-8\'\n_B=True\n_A=False\nimport os,shutil\ndef addFile(filename,content):\n\tA=filename\n\ttry:\n\t\twith open(A,\'a\',encoding=_C)as B:B.write(content)\n\t\treturn _B\n\texcept Exception as C:print(f"添加文件 {A} 时发生错误: {C}");return _A\ndef deleteFile(filename):\n\tA=filename\n\ttry:os.remove(A);return _B\n\texcept FileNotFoundError:print(f"文件 {A} 不存在。");return _A\n\texcept Exception as B:print(f"删除文件 {A} 时发生错误: {B}");return _A\ndef modifyFile(filename,content):\n\tA=filename\n\ttry:\n\t\twith open(A,\'w\',encoding=_C)as B:B.write(content)\n\t\treturn _B\n\texcept Exception as C:print(f"修改文件 {A} 时发生错误: {C}");return _A\ndef readFile(filename):\n\tA=filename\n\ttry:\n\t\twith open(A,\'r\',encoding=_C)as B:C=B.read()\n\t\treturn C\n\texcept Exception as D:print(f"读取文件 {A} 时发生错误: {D}");return\ndef copyFile(src,dst):\n\ttry:shutil.copy(src,dst);return _B\n\texcept Exception as A:print(f"复制文件 {src} 到 {dst} 时发生错误: {A}");return _A\ndef moveFile(src,dst):\n\ttry:shutil.move(src,dst);return _B\n\texcept Exception as A:print(f"移动文件 {src} 到 {dst} 时发生错误: {A}");return _A\ndef renameFile(src,dst):\n\ttry:os.rename(src,dst);return _B\n\texcept Exception as A:print(f"重命名文件 {src} 到 {dst} 时发生错误: {A}");return _A\ndef deleteDir(path):\n\tA=path\n\ttry:shutil.rmtree(A);return _B\n\texcept FileNotFoundError:print(f"目录 {A} 不存在。");return _A\n\texcept Exception as B:print(f"删除目录 {A} 时发生错误: {B}");return _A\ndef createDir(path):\n\ttry:os.makedirs(path);return _B\n\texcept Exception as A:print(f"创建目录时发生错误: {A}");return _A\ndef copyDir(src,dst):\n\ttry:shutil.copytree(src,dst);return _B\n\texcept Exception as A:print(f"复制目录 {src} 到 {dst} 时发生错误: {A}");return _A\ndef moveDir(src,dst):\n\ttry:shutil.move(src,dst);return _B\n\texcept Exception as A:print(f"移动目录 {src} 到 {dst} 时发生错误: {A}");return _A\ndef renameDir(src,dst):\n\ttry:os.rename(src,dst);return _B\n\texcept Exception as A:print(f"重命名目录 {src} 到 {dst} 时发生错误: {A}");return _A\ndef listDir(path):\n\ttry:return os.listdir(path)\n\texcept Exception as A:print(f"列出目录 {path} 下的文件和子目录时发生错误: {A}");return\ndef DocumentLibrary(operation,*C):\n\tA=operation;D={\'文件增加\':addFile,\'文件删除\':deleteFile,\'文件修改\':modifyFile,\'文件读取\':readFile,\'文件复制\':copyFile,\'文件移动\':moveFile,\'文件命名\':renameFile,\'目录创建\':createDir,\'目录删除\':deleteDir,\'目录复制\':copyDir,\'目录移动\':moveDir,\'目录命名\':renameDir,\'目录列出\':listDir,\'帮助\':helpDocumentLibrary}\n\ttry:\n\t\tB=D.get(A)\n\t\tif B:return B(*C)\n\t\telse:print(f"未知的文件操作: {A}");return _A\n\texcept Exception as E:print(f"执行文件操作 {A} 时发生错误: {E}");return _A\ndef helpDocumentLibrary():print(\'\\n\'+\'=\'*60+\'文件库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了一个函数, 文件*, 用于执行各种类型的文件和文件夹操作。\\n\\n文件* 支持的操作类型包括:\\n1.文件增加\\n2.文件删除\\n3.文件修改\\n4.文件读取\\n5.文件复制\\n6.文件移动\\n7.文件命名\\n8.目录创建\\n9.目录删除\\n10.目录复制\\n11.目录移动\\n12.目录命名\\n13.目录列出\\n14.帮助\\n\\n使用方法:\\n导入该库: @文件库\\n\\n1.文件增加: 文件*(\'文件增加\', 文件路径, 内容)\\n代码演示: 文件*(\'文件增加\', \'./test.txt\', \'hello world\')\\n运行结果: 在当前目录下创建文件\'./test.txt\', 增加内容为\'hello world\'\\n\\n2.文件删除: 文件*(\'文件删除\', 文件路径)\\n代码演示: 文件*(\'文件删除\', \'./test.txt\')\\n运行结果: 删除当前目录下的文件\'./test.txt\'\\n\\n3.文件修改: 文件*(\'文件修改\', 文件路径, 内容)\\n代码演示: 文件*(\'文件修改\', \'./test.txt\', \'hello world\')\\n运行结果: 修改当前目录下的文件\'./test.txt\', 覆盖内容为\'hello world\'\\n\\n4.文件读取: 文件*(\'文件读取\', 文件路径)\\n代码演示: 文件*(\'文件读取\', \'./test.txt\')\\n运行结果: 读取当前目录下的文件\'./test.txt\'的内容\\n\\n5.文件复制: 文件*(\'文件复制\', 源文件路径, 目标文件路径)\\n代码演示: 文件*(\'文件复制\', \'./test.txt\', \'./test2.txt\')\\n运行结果: 复制当前目录下的文件\'./test.txt\'到当前目录下的文件\'./test2.txt\'\\n\\n6.文件移动: 文件*(\'文件移动\', 源文件路径, 目标文件路径)\\n代码演示: 文件*(\'文件移动\', \'./test.txt\', \'./test2.txt\')\\n运行结果: 移动当前目录下的文件\'./test.txt\'到当前目录下的文件\'./test2.txt\'\\n\\n7.文件命名: 文件*(\'文件命名\', 源文件路径, 目标文件路径)\\n代码演示: 文件*(\'文件命名\', \'./test.txt\', \'./test2.txt\')\\n运行结果: 重命名当前目录下的文件\'./test.txt\'为\'./test2.txt\'\\n\\n8.目录创建: 文件*(\'目录创建\', 目录路径)\\n代码演示: 文件*(\'目录创建\', \'./test\')\\n运行结果: 在当前目录下创建目录\'./test\'\\n\\n9.目录删除: 文件*(\'目录删除\', 目录路径)\\n代码演示: 文件*(\'目录删除\', \'./test\')\\n运行结果: 删除当前目录下目录\'./test\'\\n\\n10.目录复制: 文件*(\'目录复制\', 源目录路径, 目标目录路径)\\n代码演示: 文件*(\'目录复制\', \'./test2\')\\n运行结果: 复制当前目录下目录\'./test\'到当前目录下目录\'./test2\'\\n\\n11.目录移动: 文件*(\'目录移动\', 源目录路径, 目标目录路径)\\n代码演示: 文件*(\'目录移动\', \'./test2\')\\n运行结果: 移动当前目录下目录\'./test2\'到当前目录下目录\'./test\'\\n\\n12.目录命名: 文件*(\'目录命名\', 源目录路径, 目标目录路径)\\n代码演示: 文件*(\'目录命名\', \'./test2\')\\n运行结果: 重命名当前目录下目录\'./test2\'为\'./test\'\\n\\n13.目录列出: 文件*(\'目录列出\', 目录路径)\\n代码演示: 文件*(\'目录列出\', \'./\')\\n运行结果: 列出当前目录下所有文件和子目录\\n\\n14.帮助: 文件*(\'帮助\')\\n代码演示: 文件*(\'帮助\')\\n运行结果: 显示该帮助文档\\n\\n注: 路径以\'/\'为分隔符, 路径可以是绝对路径或相对路径。\\n\\n")\n'
InterfaceLibrary='\n_A=False\nimport sys\nfrom PySide6 import QtGui\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtWidgets import QApplication,QMainWindow,QWidget,QLabel,QLineEdit,QPushButton,QTextEdit,QComboBox,QMessageBox\ndef createWindow(title,x,y,width,height,icon=\'\',size=None,styleSheet=\'\'):\n\tC=height;B=width;D=QApplication(sys.argv);A=QMainWindow();A.setWindowTitle(title);A.setGeometry(x,y,B,C);A.setWindowIcon(QtGui.QIcon(icon));A.setStyleSheet(styleSheet)\n\tif size:A.setFixedSize(B,C)\n\treturn D,A\ndef createDiv(window,x,y,width,height,styleSheet=\'\'):A=window;B=QWidget(parent=A[1]if isinstance(A,tuple)else A);B.setGeometry(x,y,width,height);B.setStyleSheet(styleSheet);return B\ndef createLabel(window,title,x,y,width,height,fontSize=10,styleSheet=\'\'):B=window;A=QLabel(title,parent=B[1]if isinstance(B,tuple)else B);A.move(x,y);A.resize(width,height);A.setAlignment(Qt.AlignmentFlag.AlignCenter|Qt.AlignmentFlag.AlignVCenter);C=A.font();C.setPointSize(fontSize);A.setFont(C);A.setStyleSheet(styleSheet);return A\ndef createInputBox(window,placeholder,x,y,width,height,fontSize=10,styleSheet=\'\'):B=window;A=QLineEdit(parent=B[1]if isinstance(B,tuple)else B);A.setPlaceholderText(placeholder);A.move(x,y);A.resize(width,height);C=A.font();C.setPointSize(fontSize);A.setFont(C);A.setStyleSheet(styleSheet);return A\ndef createButton(window,title,x,y,width,height,clickFunc,fontSize=10,styleSheet=\'\'):\n\tC=clickFunc;B=window;A=QPushButton(title,parent=B[1]if isinstance(B,tuple)else B);A.move(x,y);A.resize(width,height);D=A.font();D.setPointSize(fontSize);A.setFont(D);A.setStyleSheet(styleSheet)\n\tif C:A.clicked.connect(C)\n\treturn A\ndef createTextBox(window,x,y,width,height,fontSize=10,styleSheet=\'\'):B=window;A=QTextEdit(parent=B[1]if isinstance(B,tuple)else B);A.move(x,y);A.resize(width,height);C=A.font();C.setPointSize(fontSize);A.setFont(C);A.setStyleSheet(styleSheet);return A\ndef createComboBox(window,items,x,y,width,height,fontSize=10,styleSheet=\'\'):B=window;A=QComboBox(parent=B[1]if isinstance(B,tuple)else B);A.addItems(items);A.move(x,y);A.resize(width,height);C=A.font();C.setPointSize(fontSize);A.setFont(C);A.setStyleSheet(styleSheet);return A\ndef alert(title,message,btn=\'确定\',icon=\'\'):\n\tA=QMessageBox();A.setWindowIcon(QtGui.QIcon(icon));A.setWindowTitle(title);A.setText(message);B=A.addButton(btn,QMessageBox.ButtonRole.AcceptRole);A.exec()\n\tif A.clickedButton()==B:return True\ndef confirm(title,message,btn1=\'确定\',btn2=\'取消\',icon=\'\'):\n\tA=QMessageBox();A.setWindowIcon(QtGui.QIcon(icon));A.setWindowTitle(title);A.setText(message);B=A.addButton(btn1,QMessageBox.ButtonRole.AcceptRole);C=A.addButton(btn2,QMessageBox.ButtonRole.RejectRole);A.exec()\n\tif A.clickedButton()==B:return True\n\tif A.clickedButton()==C:return _A\ndef getText(inputBox):\n\tA=inputBox\n\tif isinstance(A,QComboBox):return A.currentText()\n\treturn A.text()\ndef run(wins):wins[1].show();sys.exit(wins[0].exec())\ndef InterfaceLibrary(operation,*C):\n\tA=operation;D={\'窗口\':createWindow,\'盒子\':createDiv,\'标签\':createLabel,\'输入框\':createInputBox,\'按钮\':createButton,\'文本框\':createTextBox,\'下拉框\':createComboBox,\'内容\':getText,\'弹窗\':alert,\'确认框\':confirm,\'运行\':run,\'帮助\':helpInterfaceLibrary}\n\ttry:\n\t\tB=D.get(A)\n\t\tif B:return B(*C)\n\t\telse:print(f"未知界面操作: {A}");return _A\n\texcept Exception as E:print(f"执行界面操作 {A} 时发生错误: {E}");return _A\ndef helpInterfaceLibrary():print(\'\\n\'+\'=\'*60+\'界面库使用说明\'+\'=\'*60+\'\\n\');print(\'\\n该库提供了一个函数, 界面*, 用于创建各种类型的界面组件。\\n\\n界面* 支持的操作类型包括:\\n1.窗口\\n2.盒子\\n3.标签\\n4.输入框\\n5.按钮\\n6.文本框\\n7.下拉框\\n8.内容\\n9.弹窗\\n10.确认框\\n11.运行\\n12.帮助\\n\\n使用方法:\\n导入该库: @界面库\\n\\n1.窗口: 界面*(\\\'窗口\\\', 标题, x坐标, y坐标, 宽度, 高度, 图标路径(默认\\\'\\\'), 大小(默认None), 样式(默认\\\'\\\'))\\n代码演示: 窗口对象 = 界面*(\\\'窗口\\\', \\\'测试窗口\\\', 100, 100, 500, 500, \\\'./logo.ico\\\', \\\'1\\\', \\\'background-color: blue;\\\')\\n运行结果: 创建一个窗口, 标题为\\\'测试窗口\\\', 位置(100, 100), 大小(500, 500), 返回窗口对象和应用对象。\\n\\n2.盒子: 界面*(\\\'盒子\\\', 容器, x坐标, y坐标, 宽度, 高度, 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'盒子\\\', 窗口对象, 100, 100, 100, 30, "background-color: red;")\\n运行结果: 在窗口app中创建一个盒子, 位置(100, 100), 大小(100, 30), 样式为红色背景, 返回盒子对象。\\n\\n3.标签: 界面*(\\\'标签\\\', 容器, 标题, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'标签\\\', 窗口对象, \\\'测试标签\\\', 100, 100, 100, 30, 12, "color: blue;")\\n运行结果: 在容器中创建一个标签, 标题为\\\'测试标签\\\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回标签对象。\\n\\n4.输入框: 界面*(\\\'输入框\\\', 容器, 占位符, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'输入框\\\', 窗口对象, \\\'请输入内容\\\', 100, 100, 100, 30, 12, "color: blue;")\\n运行结果: 在容器中创建一个输入框, 占位符为\\\'请输入内容\\\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回输入框对象。\\n\\n5.按钮: 界面*(\\\'按钮\\\', 容器, 标题, x坐标, y坐标, 宽度, 高度, 点击函数(默认None), 字体大小(默认10), 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'按钮\\\', 窗口对象, \\\'测试按钮\\\', 100, 100, 100, 30, 匿名: 输出*(\\\'按钮被点击了\\\'), 12, "color: blue;")\\n运行结果: 在容器中创建一个按钮, 标题为\\\'测试按钮\\\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 点击函数为打印\\\'按钮被点击了\\\', 返回按钮对象。\\n\\n6.文本框: 界面*(\\\'文本框\\\', 容器, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'文本框\\\', 窗口对象, 100, 100, 100, 30, 12, "color: blue;")\\n运行结果: 在容器中创建一个文本框, 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回文本框对象。\\n\\n7.下拉框: 界面*(\\\'下拉框\\\', 容器, 选项列表, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\\\'\\\'))\\n代码演示: 界面*(\\\'下拉框\\\', 窗口对象, ["选项1", "选项2", "选项3"], 100, 100, 100, 30, 12, "color: blue;")\\n运行结果: 在容器中创建一个下拉框, 选项列表为["选项1", "选项2", "选项3"], 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回下拉框对象。\\n\\n8.内容: 界面*(\\\'内容\\\', 输入框 / 下拉框)\\n代码演示: 输入框对象 = 界面*(\\\'输入框\\\', 窗口对象, \\\'请输入内容\\\', 100, 100, 100, 30, 12, "color: blue;")\\n        下拉框对象 = 界面*(\\\'下拉框\\\', 窗口对象, ["选项1", "选项2", "选项3"], 100, 100, 100, 30, 12, "color: blue;")\\n        输出*(界面*(\\\'内容\\\', 输入框对象))\\n        输出*(界面*(\\\'内容\\\', 下拉框对象))\\n运行结果: 在窗口中创建输入框和下拉框, 并获取输入框/ 下拉框的文本内容。\\n          \\n9.弹窗: 界面*(\\\'弹窗\\\', 标题, 消息内容, 确定按钮(默认\\\'确定\\\'), 图标路径(默认\\\'\\\'))\\n代码演示: 界面*(\\\'弹窗\\\', \\\'测试弹窗\\\', \\\'测试消息内容\\\', \\\'确定\\\', \\\'./logo.ico\\\')\\n运行结果: 弹出一个测试弹窗, 标题为\\\'测试弹窗\\\', 消息内容为\\\'测试消息内容\\\', 确定按钮为\\\'确定\\\', 图标路径为\\\'./logo.ico\\\', 返回True\\n          \\n10.确认框: 界面*(\\\'确认框\\\', 标题, 消息内容, 确定按钮(默认\\\'确定\\\'), 取消按钮(默认\\\'取消\\\'), 图标路径(默认\\\'\\\'))\\n代码演示: 界面*(\\\'确认框\\\', \\\'测试确认框\\\', \\\'测试确认消息\\\', \\\'确定\\\', \\\'取消\\\', \\\'./logo.ico\\\')\\n运行结果: 弹出一个测试确认框, 标题为\\\'测试确认框\\\', 消息内容为\\\'测试确认消息\\\', 确定按钮为\\\'确定\\\', 取消按钮为\\\'取消\\\', 图标路径为\\\'./logo.ico\\\', 返回True或False\\n\\n11.运行: 界面*(\\\'运行\\\', 容器)\\n代码演示: 界面*(\\\'运行\\\', 窗口对象)\\n运行结果: 启动程序, 显示窗口。\\n\\n12.帮助: 界面*(\\\'帮助\\\')\\n代码演示: 界面*(\\\'帮助\\\')\\n运行结果: 显示该帮助文档。\\n\\n\\n完整示例:\\n@界面库\\n窗口对象 = 界面*(\\\'窗口\\\', \\\'登录界面\\\', 100, 100, 320, 200)\\n界面*(\\\'标签\\\', 窗口对象, \\\'账号:\\\', 50, 30, 30, 30)\\n界面*(\\\'标签\\\', 窗口对象, \\\'密码:\\\', 50, 80, 30, 30)\\n账号输入框 = 界面*(\\\'输入框\\\', 窗口对象, \\\'请输入用户名\\\', 100, 30, 180, 30)\\n密码输入框 = 界面*(\\\'输入框\\\', 窗口对象, \\\'请输入密码\\\', 100, 80, 180, 30)\\n函数 登录():\\n    确认 = 界面*(\\\'确认框\\\', \\\'提示\\\', \\\'确认要登录吗?\\\')\\n    如果 不是 确认: 返回\\n    如果 界面*(\\\'内容\\\', 账号输入框) == "admin" 并且 界面*(\\\'内容\\\', 密码输入框) == "123456": 界面*(\\\'弹窗\\\', \\\'提示\\\', \\\'登录成功\\\')\\n    否则: 界面*(\\\'弹窗\\\', \\\'提示\\\', \\\'用户名或密码错误\\\')\\n界面*(\\\'按钮\\\', 窗口对象, \\\'登录\\\', 100, 130, 100, 40, 登录)\\n界面*(\\\'运行\\\', 窗口对象)\\n\\n          \\n注: 有关联的函数, 运行必须在最后一行, 否则窗口不会显示。\\n          \\n\')\n'
NetworkLibrary='\nimport uvicorn,threading,requests\nfrom fastapi import FastAPI,APIRouter,HTTPException,Request\napp=FastAPI()\ndef createRouter(path,logic,method):\n\tE=\'GET\';B=method;C=logic;A=APIRouter()\n\tasync def D(request):\n\t\tA=request;B={\'url\':A.url,\'status\':200}\n\t\tif A.method==E:\n\t\t\tF=A.query_params\n\t\t\tfor(G,H)in F.items():B[G]=H\n\t\t\treturn await C(B)\n\t\telse:D=await A.json();D.update(B);I=await C(D);return I\n\tif B.upper()==\'POST\':\n\t\t@A.post(path)\n\t\tasync def F(request):return await D(request)\n\telif B.upper()==E:\n\t\t@A.get(path)\n\t\tasync def G(request):return await D(request)\n\telse:raise HTTPException(status_code=400,detail=\'不支持的请求方法\')\n\treturn A\ndef registerRouter(url,logic,method):A=createRouter(url,logic,method);app.include_router(A)\ndef runServer(host,port):\n\tdef A():uvicorn.run(app,host=host,port=port,log_level=\'error\')\n\tthreading.Thread(target=A).start()\ndef postRequest(url,data):\n\ttry:A=requests.post(url,json=data);return A.json()if A.status_code==200 else(A.status_code,A.text)\n\texcept Exception as B:print(f"发起 POST 请求 {url} 时发生错误: {B}");return\ndef getRequest(url,params=None):\n\ttry:A=requests.get(url,params=params);return A.json()if A.status_code==200 else(A.status_code,A.text)\n\texcept Exception as B:print(f"发起 GET 请求 {url} 时发生错误: {B}");return\ndef NetworkLibrary(operation=None,*D):\n\tC=False;A=operation;E={\'路由\':registerRouter,\'启动\':runServer,\'post\':postRequest,\'get\':getRequest,\'帮助\':helpNetworkLibrary}\n\ttry:\n\t\tB=E.get(A)\n\t\tif B:return B(*D)\n\t\telse:print(f"未知的网络操作: {A}");return C\n\texcept Exception as F:print(f"执行网络操作 {A} 时发生错误: {F}");return C\ndef helpNetworkLibrary():print(\'\\n\'+\'=\'*60+\'网络库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了一个函数, 网络*, 用于执行各种类型的网络操作。\\n\\n网络* 支持的操作类型包括:\\n1.路由\\n2.启动\\n3.post\\n4.get\\n5.帮助\\n\\n使用方法:\\n导入该库: @网络库\\n\\n1.路由: 网络*(\'路由\', 接口路径, 逻辑函数, 请求方法(\'POST/GET\'))\\n代码演示: 网络*(\'路由\', \'/api/test\', 处理函数, \'GET\')\\n运行结果: 注册接口 /api/test, 处理请求数据并返回结果, 请求方法为 GET。\\n          \\n2.启动: 网络*(\'启动\', 服务器地址, 端口号)\\n代码演示: 网络*(\'启动\', \'127.0.0.1\', 8000)\\n运行结果: 启动服务器, 监听 127.0.0.1:8000。\\n          \\n3.post: 网络*(\'post\', 请求地址, 请求数据)\\n代码演示: 网络*(\'post\', \'http://127.0.0.1:8000/api/test\', {\'名字\': \'fjh\', \'年龄\': 20})\\n运行结果: 发起 POST 请求 http://127.0.0.1:8000/api/test, 请求数据为 {\'名字\': \'fjh\', \'年龄\': 20}。\\n          \\n4.get: 网络*(\'get\', 请求地址, 请求参数)\\n代码演示: 网络*(\'get\', \'http://127.0.0.1:8000/api/test\', {\'名字\': \'fjh\', \'年龄\': 20})\\n运行结果: 发起 GET 请求 http://127.0.0.1:8000/api/test, 请求参数为 {\'名字\': \'fjh\', \'年龄\': 20}。\\n\\n5.帮助: 网络*(\'帮助\')\\n代码演示: 网络*(\'帮助\')\\n运行结果: 显示该帮助文档。\\n\\n完整示例:\\n@网络库\\n          \\n异步 函数 get处理请求(接收请求数据):\\n    输出*(接收请求数据)\\n    返回 {\'数据\': \'处理成功, 我已经收到请求数据!\'}\\n          \\n异步 函数 post处理请求(接收请求数据):\\n    输出*(接收请求数据)\\n    返回 {\'数据\': \'处理成功, 我已经收到请求数据!\'}\\n          \\n网络*(\'路由\', \'/api/get\', get处理请求, \'GET\')\\n网络*(\'路由\', \'/api/post\', post处理请求, \'POST\')\\n          \\n网络*(\'启动\', \'127.0.0.1\', 8000)\\n          \\nget结果 = 网络*(\'get\', \'http://127.0.0.1:8000/api/get\', {\'名字\': \'fjh\', \'年龄\': 20})\\n输出*(get结果)\\n          \\npost结果 = 网络*(\'post\', \'http://127.0.0.1:8000/api/post\', {\'名字\': \'fjh\', \'年龄\': 20})\\n输出*(post结果)\\n\\n注: 逻辑函数必须是异步函数, 接收请求数据并返回响应数据。\\n          \\n")\n'
SystemLibrary='\n_F=False\n_E=\'running\'\n_D=\'pid\'\n_C=True\n_B=\'name\'\n_A=None\nimport os,time,uuid,psutil,winreg,threading,webbrowser,subprocess\ndef getTime():\n\ttry:return int(time.time())\n\texcept Exception as A:print(f"获取时间戳失败: {A}");return 0\ndef getDateTime(data=_A):\n\tA=data\n\ttry:\n\t\tif A is _A:A=time.localtime()\n\t\treturn time.strftime(\'%Y-%m-%d %H:%M:%S\',A)\n\texcept Exception as B:print(f"获取时间字符串失败: {B}");return\'\'\ndef timer(function,interval,endTime):\n\tA=interval\n\tdef B():\n\t\ttry:\n\t\t\tB=time.time();C=B+endTime/1000;time.sleep(A/1000)\n\t\t\twhile time.time()<C:function();time.sleep(A/1000)\n\t\texcept Exception as D:print(f"计时器执行失败: {D}")\n\tthreading.Thread(target=B).start()\ntimers={}\ndef infiniteTimer(function,interval):\n\tB=interval\n\tdef C(timerId):\n\t\tA=timerId\n\t\ttry:\n\t\t\ttime.sleep(B/1000)\n\t\t\twhile timers[A][_E]:function();time.sleep(B/1000)\n\t\texcept Exception as C:print(f"计时器执行失败: {C}")\n\t\tfinally:timers.pop(A,_A)\n\tA=str(uuid.uuid4());timers[A]={_E:_C};threading.Thread(target=C,args=(A,)).start();return A\ndef stopTimer(timerId):\n\tA=timerId\n\ttry:\n\t\tif A in timers:timers[A][_E]=_F\n\t\telse:print(f"未找到计时器: {A}")\n\texcept Exception as B:print(f"停止计时器失败: {B}")\ndef sleep(milliseconds):\n\ttry:time.sleep(milliseconds/1000)\n\texcept Exception as A:print(f"休眠失败: {A}")\ndef openUrl(url):\n\ttry:webbrowser.open(url)\n\texcept Exception as A:print(f"打开网页失败: {url}, 错误: {A}")\ndef shutdown(timeout):\n\tA=timeout\n\ttry:subprocess.run(f"shutdown /s /f /t {A}",shell=_C)\n\texcept Exception as B:print(f"定时关机失败: {A}, 错误: {B}")\ndef toggleDesktop(enable):\n\tA=enable\n\ttry:B=\'start explorer.exe\'if A else\'taskkill /f /im explorer.exe\';os.system(B)\n\texcept Exception as C:print(f"操作桌面失败: {A}, 错误: {C}")\ndef toggleTaskManager(enable):\n\tA=enable\n\ttry:\n\t\tB=0 if A else 1;C=\'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\'\n\t\twith winreg.CreateKey(winreg.HKEY_CURRENT_USER,C)as D:winreg.SetValueEx(D,\'DisableTaskMgr\',0,winreg.REG_DWORD,B)\n\texcept Exception as E:print(f"控制任务管理器失败: {A}, 错误: {E}")\ndef getProcessList():\n\tB=\'username\'\n\ttry:\n\t\tprint(f"{"PID".ljust(10)} {"名称".ljust(30)} {"用户名".ljust(20)}");print(\'=\'*100)\n\t\tfor A in psutil.process_iter([_D,_B,B]):\n\t\t\ttry:C=str(A.info[_D]).ljust(10);D=str(A.info[_B]).ljust(30);E=str(A.info[B]).ljust(20);print(f"{C} {D} {E}")\n\t\t\texcept(psutil.NoSuchProcess,psutil.AccessDenied,psutil.ZombieProcess):continue\n\texcept Exception as F:print(f"获取进程列表失败: {F}")\ndef killProcess(name=_A):\n\tB=name\n\ttry:\n\t\tif not B:print(\'没有指定进程名称, 杀死所有进程！\');B=_A\n\t\tfor A in psutil.process_iter([_D,_B]):\n\t\t\ttry:\n\t\t\t\tif B is _A or A.info[_B]==B:A.terminate();A.wait(timeout=3);print(f"进程 {A.info[_B]} (PID: {A.info[_D]}) 已被终止")\n\t\t\texcept(psutil.NoSuchProcess,psutil.AccessDenied,psutil.ZombieProcess):continue\n\texcept Exception as C:print(f"杀死进程失败: {C}")\ndef loop(count,func):\n\tB=count\n\tif B is _C:\n\t\tC=0\n\t\twhile _C:func(C);C+=1\n\telse:\n\t\tA=0\n\t\twhile B>A:func(A);A+=1\ndef SystemLibrary(operation,*C):\n\tA=operation;D={\'打开网页\':openUrl,\'定时关机\':shutdown,\'控制桌面\':toggleDesktop,\'任务管理器\':toggleTaskManager,\'获取进程\':getProcessList,\'杀死进程\':killProcess,\'获取时间戳\':getTime,\'格式化时间戳\':getDateTime,\'计时器\':timer,\'无限计时\':infiniteTimer,\'停止计时\':stopTimer,\'暂停程序\':sleep,\'循环\':loop,\'帮助\':helpSystemLibrary}\n\ttry:\n\t\tB=D.get(A)\n\t\tif B:return B(*C)\n\t\telse:print(f"未知的系统操作: {A}");return _F\n\texcept Exception as E:print(f"执行系统操作 {A} 时发生错误: {E}");return _F\ndef helpSystemLibrary():print(\'\\n\'+\'=\'*60+\'系统库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了 系统* 函数, 分别用于获取时间和执行系统操作。\\n\\n系统* 支持的操作类型包括:\\n1.获取时间戳\\n2.格式化时间戳\\n3.计时器\\n4.无限计时\\n5.停止计时\\n6.暂停程序\\n7.打开网页\\n8.控制桌面\\n9.获取进程\\n10.杀死进程\\n11.定时关机\\n12.任务管理器\\n13.循环\\n14.帮助\\n          \\n使用方法:\\n导入该库: @系统库\\n\\n1.获取时间戳: 系统*(\'获取\')\\n代码演示: 系统*(\'获取\')\\n运行结果: 返回当前时间戳\\n          \\n2.格式化时间戳: 系统*(\'格式化\', 时间戳(默认None, 若不指定则获取当前时间))\\n代码演示: 系统*(\'格式化\', 1621512465)\\n运行结果: 返回格式化后的时间字符串\\n\\n3.计时器: 系统*(\'计时器\', 函数, 间隔毫秒时间, 结束毫秒时间)\\n代码演示: 系统*(\'计时器\', 匿名: 输出*(\'hello world\'), 1000, 5000)\\n运行结果: 打印\'hello world\' 5秒后停止\\n          \\n4.无限计时: 系统*(\'无限计时\', 函数, 间隔毫秒时间)\\n代码演示: 系统*(\'无限计时\', 匿名: 输出*(\'hello world\'), 1000)\\n运行结果: 打印\'hello world\' 每隔1秒输出一次, 返回计时器ID\\n          \\n5.停止计时: 系统*(\'停止计时\', 计时器ID)\\n代码演示: 系统*(\'停止计时\', 计时器ID)\\n运行结果: 停止计时器\\n\\n6.暂停程序: 系统*(\'暂停程序\', 毫秒时间)\\n代码演示: 系统*(\'暂停程序\', 5000)\\n运行结果: 程序暂停5秒\\n\\n7.打开网页: 系统*(\'打开网页\', 网址)\\n代码演示: 系统*(\'打开网页\', \'https://www.baidu.com\')\\n运行结果: 打开百度网页\\n\\n8.控制桌面: 系统*(\'控制桌面\', 真的 / 假的)\\n代码演示: 系统*(\'控制桌面\', 假的)\\n运行结果: 关闭桌面\\n\\n9.获取进程: 系统*(\'获取进程\')\\n代码演示: 系统*(\'获取进程\')\\n运行结果: 打印当前进程列表\\n\\n10.杀死进程: 系统*(\'杀死进程\', 进程名称(若不指定则杀死所有进程))\\n代码演示: 系统*(\'杀死进程\', \'notepad.exe\')\\n运行结果: 杀死notepad进程\\n\\n11.定时关机: 系统*(\'定时关机\', 毫秒时间)\\n代码演示: 系统*(\'定时关机\', 60000)\\n运行结果: 定时关机1分钟\\n\\n12.任务管理器: 系统*(\'任务管理器\', 真的 / 假的)\\n代码演示: 系统*(\'任务管理器\', 假的)\\n运行结果: 禁用任务管理器\\n\\n13.循环: 系统*(\'循环\', 循环次数 / 假的, 函数)\\n代码演示: 系统*(\'循环\', 5, 匿名: 输出*(\'hello world\'))\\n          \\n14.帮助: 系统*(\'帮助\')\\n代码演示: 系统*(\'帮助\')\\n运行结果: 显示该帮助文档\\n\\n注: 杀死所有进程容易造成系统崩溃, 请谨慎使用。\\n")\n'
ConcurrentLibraries='\nimport asyncio,threading\ndef create(fun,args=()):A=threading.Thread(target=fun,args=args);A.start()\ndef runThreads(func,args=()):\n\tA=[]\n\tfor B in func:C=create(B,args);A.append(C)\nasync def createAsync(funcs):A=[asyncio.create_task(A())for A in funcs];await asyncio.gather(*A)\ndef runAsync(funcs):asyncio.run(createAsync(funcs))\ndef ConcurrentLibraries(operation,*D):\n\tC=False;A=operation;E={\'线程\':runThreads,\'异步\':runAsync,\'帮助\':helpConcurrentLibraries}\n\ttry:\n\t\tB=E.get(A)\n\t\tif B:return B(*D)\n\t\telse:print(f"未知的并发操作: {A}");return C\n\texcept Exception as F:print(f"执行并发操作 {A} 时发生错误: {F}");return C\ndef helpConcurrentLibraries():print(\'\\n\'+\'=\'*60+\'并发库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了一个函数, 并发*, 用于执行各种类型并发操作。\\n\\n并发* 支持的操作类型包括:\\n1. 线程 \\n2. 异步        \\n\\n使用方法:\\n导入该库: @并发库\\n          \\n1.线程: 并发*(\'线程\', [函数1, 函数2, ...], [参数1, 参数2, ...])\\n代码演示: 并发*(\'线程\', [输出*, 输出*, 输出*], [\'hello\', \'world\', \'python\'])\\n运行结果: 三个线程分别执行函数 输出*(\'hello\'), 输出*(\'world\'), 输出*(\'python\')\\n          \\n2.异步: 并发*(\'异步\', [函数1, 函数2, ...])\\n代码演示: 并发*(\'异步\', [异步函数1, 异步函数2, 异步函数3])\\n运行结果: 三个异步函数分别执行\\n          \\n3.帮助: 并发*(\'帮助\')\\n代码演示: 并发*(\'帮助\')\\n运行结果: 显示并发库使用说明\\n")\n'
RandomLibrary='\n_B=\'列表不能为空\'\n_A=\'小值不能大于大值\'\nimport random\ndef generateRandomInt(minValue,maxValue):\n\tB=maxValue;A=minValue\n\ttry:\n\t\tif A>B:raise ValueError(_A)\n\t\treturn random.randint(A,B)\n\texcept ValueError as C:return\ndef generateRandomFloat(minValue,maxValue):\n\tB=maxValue;A=minValue\n\ttry:\n\t\tif A>B:raise ValueError(_A)\n\t\treturn random.uniform(A,B)\n\texcept ValueError as C:return\ndef chooseRandomElement(elements):\n\tA=elements\n\ttry:\n\t\tif not A:raise ValueError(_B)\n\t\treturn random.choice(A)\n\texcept ValueError as B:return\ndef shuffleList(elements):\n\tA=elements\n\ttry:\n\t\tif not A:raise ValueError(_B)\n\t\tB=A.copy();random.shuffle(B);return B\n\texcept ValueError as C:return\ndef RandomLibrary(operation=None,*D):\n\tC=False;A=operation;E={\'整数\':generateRandomInt,\'浮点数\':generateRandomFloat,\'元素\':chooseRandomElement,\'列表\':shuffleList,\'帮助\':helpRandomLibrary}\n\ttry:\n\t\tB=E.get(A)\n\t\tif B:return B(*D)\n\t\telse:print(f"不支持的操作: {A}");return C\n\texcept Exception as F:print(f"调用 {A} 时发生错误: {F}");return C\ndef helpRandomLibrary():print(\'\\n\'+\'=\'*60+\'随机库使用说明\'+\'=\'*60+\'\\n\');print("\\n该库提供了 随机* 函数, 分别用于获取时间和执行随机操作。\\n\\n随机* 支持的操作类型包括:\\n1.整数\\n2.浮点数\\n3.元素\\n4.列表\\n5.帮助     \\n          \\n使用方法:\\n导入该库: @随机库\\n\\n1.整数: 随机*(\'整数\', 最小值, 最大值)\\n代码演示: 随机*(\'整数\', 1, 10)\\n运行结果: 返回一个随机整数\\n          \\n2.浮点数: 随机*(\'浮点数\', 最小值, 最大值)\\n代码演示: 随机*(\'浮点数\', 1.0, 10.0)\\n运行结果: 返回一个随机浮点数\\n          \\n3.元素: 随机*(\'元素\', 元素1, 元素2, 元素3, ...)\\n代码演示: 随机*(\'元素\', \'apple\', \'banana\', \'orange\')\\n运行结果: 返回一个随机元素\\n          \\n4.列表: 随机*(\'列表\', 元素1, 元素2, 元素3, ...)\\n代码演示: 随机*(\'列表\', \'apple\', \'banana\', \'orange\')\\n运行结果: 返回一个随机列表\\n          \\n5.帮助: 随机*(\'帮助\')\\n代码演示: 随机*(\'帮助\')\\n运行结果: 打印帮助文档\\n")\n'


Helps = r'''
_B='='
_A='\n'
def helpKeywordLibrary():print(_A+_B*60+'基础关键字使用说明'+_B*60+_A);print('\n该语言提供共计32个关键字、11个基本函数和7个内置库(自动化库、并发库、文件操作库、界面库、网络库、系统库、随机库), 用于实现各种功能。\n          \n1. 条件判断: 如果、否则、如否、并且、或者、跳过、不是、是的\n          \n2. 布尔值: 假的、真的、空值\n          \n3. 循环语句: 迭代、中断、循环、占位、在内\n\n4.  异常处理：捕获、异常、最终\n\n5. 函数定义: 函数、异步函数、返回\n          \n6. 导入模块: 导入、别名、起始\n          \n7. 对象删除: 删除\n          \n8. 变量声明: 全局\n          \n9. 异步操作: 异步、等待\n          \n10. 装饰器: 匿名函数\n          \n11. 文件操作: 使用、编码   \n\n12. 基本函数: 输出*()、输入*()、执行*()、退出*()、范围*()、数字*()、字符串*()、布尔值*()、类型*()、异常*()、长度*()\n')
def helpAutomationLibrary():print(_A+_B*60+'自动化库使用说明'+_B*60+_A);print("\n该库提供了一个函数, 自动化*, 用于执行各种类型的自动化操作。\n\n自动化* 支持的操作类型包括:\n1.鼠标单击\n2.鼠标移动\n3.鼠标滚轮\n4.鼠标操作\n5.键盘操作\n6.键盘输入\n7.帮助\n\n使用方法:\n导入该库: @自动化库\n\n1.鼠标单击: 自动化*('鼠标单击', 点击次数(默认1), 间隔时间(默认0), x坐标(默认None), y坐标(默认None), 按钮(默认'左', 可选'左/右/中'))\n代码演示: 自动化*('鼠标单击', 2, 0.5, 100, 100, '左')\n运行结果: 鼠标单击屏幕坐标(100, 100) 2次, 间隔0.5秒, 鼠标右键单击\n\n2.鼠标移动: 自动化*('鼠标移动', x坐标, y坐标, 移动类型(默认'屏幕', 可选'屏幕/相对'))\n代码演示: 自动化*('鼠标移动', 100, 100, '相对')\n运行结果: 鼠标相对自己位置移动(100, 100)\n\n3.鼠标滚轮: 自动化*('鼠标滚轮', 滚动次数(默认1))\n代码演示: 自动化*('鼠标滚轮', -100)\n运行结果: 鼠标滚轮滚动向下100次\n\n4.鼠标操作: 自动化*('鼠标操作', 操作(默认'按下', 可选'按下/松开'), 按钮(默认'左', 可选'左/右/中'))\n代码演示: 自动化*('鼠标操作', '松开', '右')\n运行结果: 鼠标右键松开\n\n5.键盘操作: 自动化*('键盘操作', 按键)\n代码演示: 自动化*('键盘操作', 'ctrl', 'c')\n运行结果: 按下ctrl和c键\n\n6.键盘输入: 自动化*('键盘输入', 输入内容, 输入速度(默认1), 间隔时间(默认0)\n代码演示: 自动化*('键盘输入', 'hello world', 2, 0.1)\n运行结果: 输入'hello world' 每次输出2个字符, 每次间隔0.1秒\n\n7.帮助: 自动化*('帮助')\n代码演示: 自动化*('帮助')\n运行结果: 显示该帮助文档\n\n注: 坐标系以左上角为原点, x轴向右为正, y轴向下为正, 坐标单位为像素。\n\n")
def helpConcurrentLibraries():print(_A+_B*60+'并发库使用说明'+_B*60+_A);print("\n该库提供了一个函数, 并发*, 用于执行各种类型并发操作。\n\n并发* 支持的操作类型包括:\n1. 线程 \n2. 异步        \n\n使用方法:\n导入该库: @并发库\n          \n1.线程: 并发*('线程', [函数1, 函数2, ...], [参数1, 参数2, ...])\n代码演示: 并发*('线程', [输出*, 输出*, 输出*], ['hello', 'world', 'python'])\n运行结果: 三个线程分别执行函数 输出*('hello'), 输出*('world'), 输出*('python')\n          \n2.异步: 并发*('异步', [函数1, 函数2, ...])\n代码演示: 并发*('异步', [异步函数1, 异步函数2, 异步函数3])\n运行结果: 三个异步函数分别执行\n          \n3.帮助: 并发*('帮助')\n代码演示: 并发*('帮助')\n运行结果: 显示并发库使用说明\n")
def helpDocumentLibrary():print(_A+_B*60+'文件库使用说明'+_B*60+_A);print("\n该库提供了一个函数, 文件*, 用于执行各种类型的文件和文件夹操作。\n\n文件* 支持的操作类型包括:\n1.文件增加\n2.文件删除\n3.文件修改\n4.文件读取\n5.文件复制\n6.文件移动\n7.文件命名\n8.目录创建\n9.目录删除\n10.目录复制\n11.目录移动\n12.目录命名\n13.目录列出\n14.帮助\n\n使用方法:\n导入该库: @文件库\n\n1.文件增加: 文件*('文件增加', 文件路径, 内容)\n代码演示: 文件*('文件增加', './test.txt', 'hello world')\n运行结果: 在当前目录下创建文件'./test.txt', 增加内容为'hello world'\n\n2.文件删除: 文件*('文件删除', 文件路径)\n代码演示: 文件*('文件删除', './test.txt')\n运行结果: 删除当前目录下的文件'./test.txt'\n\n3.文件修改: 文件*('文件修改', 文件路径, 内容)\n代码演示: 文件*('文件修改', './test.txt', 'hello world')\n运行结果: 修改当前目录下的文件'./test.txt', 覆盖内容为'hello world'\n\n4.文件读取: 文件*('文件读取', 文件路径)\n代码演示: 文件*('文件读取', './test.txt')\n运行结果: 读取当前目录下的文件'./test.txt'的内容\n\n5.文件复制: 文件*('文件复制', 源文件路径, 目标文件路径)\n代码演示: 文件*('文件复制', './test.txt', './test2.txt')\n运行结果: 复制当前目录下的文件'./test.txt'到当前目录下的文件'./test2.txt'\n\n6.文件移动: 文件*('文件移动', 源文件路径, 目标文件路径)\n代码演示: 文件*('文件移动', './test.txt', './test2.txt')\n运行结果: 移动当前目录下的文件'./test.txt'到当前目录下的文件'./test2.txt'\n\n7.文件命名: 文件*('文件命名', 源文件路径, 目标文件路径)\n代码演示: 文件*('文件命名', './test.txt', './test2.txt')\n运行结果: 重命名当前目录下的文件'./test.txt'为'./test2.txt'\n\n8.目录创建: 文件*('目录创建', 目录路径)\n代码演示: 文件*('目录创建', './test')\n运行结果: 在当前目录下创建目录'./test'\n\n9.目录删除: 文件*('目录删除', 目录路径)\n代码演示: 文件*('目录删除', './test')\n运行结果: 删除当前目录下目录'./test'\n\n10.目录复制: 文件*('目录复制', 源目录路径, 目标目录路径)\n代码演示: 文件*('目录复制', './test2')\n运行结果: 复制当前目录下目录'./test'到当前目录下目录'./test2'\n\n11.目录移动: 文件*('目录移动', 源目录路径, 目标目录路径)\n代码演示: 文件*('目录移动', './test2')\n运行结果: 移动当前目录下目录'./test2'到当前目录下目录'./test'\n\n12.目录命名: 文件*('目录命名', 源目录路径, 目标目录路径)\n代码演示: 文件*('目录命名', './test2')\n运行结果: 重命名当前目录下目录'./test2'为'./test'\n\n13.目录列出: 文件*('目录列出', 目录路径)\n代码演示: 文件*('目录列出', './')\n运行结果: 列出当前目录下所有文件和子目录\n\n14.帮助: 文件*('帮助')\n代码演示: 文件*('帮助')\n运行结果: 显示该帮助文档\n\n注: 路径以'/'为分隔符, 路径可以是绝对路径或相对路径。\n\n")
def helpInterfaceLibrary():print(_A+_B*60+'界面库使用说明'+_B*60+_A);print('\n该库提供了一个函数, 界面*, 用于创建各种类型的界面组件。\n\n界面* 支持的操作类型包括:\n1.窗口\n2.盒子\n3.标签\n4.输入框\n5.按钮\n6.文本框\n7.下拉框\n8.内容\n9.弹窗\n10.确认框\n11.运行\n12.帮助\n\n使用方法:\n导入该库: @界面库\n\n1.窗口: 界面*(\'窗口\', 标题, x坐标, y坐标, 宽度, 高度, 图标路径(默认\'\'), 大小(默认None), 样式(默认\'\'))\n代码演示: 窗口对象 = 界面*(\'窗口\', \'测试窗口\', 100, 100, 500, 500, \'./logo.ico\', \'1\', \'background-color: blue;\')\n运行结果: 创建一个窗口, 标题为\'测试窗口\', 位置(100, 100), 大小(500, 500), 返回窗口对象和应用对象。\n\n2.盒子: 界面*(\'盒子\', 容器, x坐标, y坐标, 宽度, 高度, 样式(默认\'\'))\n代码演示: 界面*(\'盒子\', 窗口对象, 100, 100, 100, 30, "background-color: red;")\n运行结果: 在窗口app中创建一个盒子, 位置(100, 100), 大小(100, 30), 样式为红色背景, 返回盒子对象。\n\n3.标签: 界面*(\'标签\', 容器, 标题, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\'\'))\n代码演示: 界面*(\'标签\', 窗口对象, \'测试标签\', 100, 100, 100, 30, 12, "color: blue;")\n运行结果: 在容器中创建一个标签, 标题为\'测试标签\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回标签对象。\n\n4.输入框: 界面*(\'输入框\', 容器, 占位符, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\'\'))\n代码演示: 界面*(\'输入框\', 窗口对象, \'请输入内容\', 100, 100, 100, 30, 12, "color: blue;")\n运行结果: 在容器中创建一个输入框, 占位符为\'请输入内容\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回输入框对象。\n\n5.按钮: 界面*(\'按钮\', 容器, 标题, x坐标, y坐标, 宽度, 高度, 点击函数(默认None), 字体大小(默认10), 样式(默认\'\'))\n代码演示: 界面*(\'按钮\', 窗口对象, \'测试按钮\', 100, 100, 100, 30, 匿名: 输出*(\'按钮被点击了\'), 12, "color: blue;")\n运行结果: 在容器中创建一个按钮, 标题为\'测试按钮\', 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 点击函数为打印\'按钮被点击了\', 返回按钮对象。\n\n6.文本框: 界面*(\'文本框\', 容器, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\'\'))\n代码演示: 界面*(\'文本框\', 窗口对象, 100, 100, 100, 30, 12, "color: blue;")\n运行结果: 在容器中创建一个文本框, 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回文本框对象。\n\n7.下拉框: 界面*(\'下拉框\', 容器, 选项列表, x坐标, y坐标, 宽度, 高度, 字体大小(默认10), 样式(默认\'\'))\n代码演示: 界面*(\'下拉框\', 窗口对象, ["选项1", "选项2", "选项3"], 100, 100, 100, 30, 12, "color: blue;")\n运行结果: 在容器中创建一个下拉框, 选项列表为["选项1", "选项2", "选项3"], 位置(100, 100), 大小(100, 30), 字体大小为12, 样式为蓝色字体, 返回下拉框对象。\n\n8.内容: 界面*(\'内容\', 输入框 / 下拉框)\n代码演示: 输入框对象 = 界面*(\'输入框\', 窗口对象, \'请输入内容\', 100, 100, 100, 30, 12, "color: blue;")\n        下拉框对象 = 界面*(\'下拉框\', 窗口对象, ["选项1", "选项2", "选项3"], 100, 100, 100, 30, 12, "color: blue;")\n        输出*(界面*(\'内容\', 输入框对象))\n        输出*(界面*(\'内容\', 下拉框对象))\n运行结果: 在窗口中创建输入框和下拉框, 并获取输入框/ 下拉框的文本内容。\n          \n9.弹窗: 界面*(\'弹窗\', 标题, 消息内容, 确定按钮(默认\'确定\'), 图标路径(默认\'\'))\n代码演示: 界面*(\'弹窗\', \'测试弹窗\', \'测试消息内容\', \'确定\', \'./logo.ico\')\n运行结果: 弹出一个测试弹窗, 标题为\'测试弹窗\', 消息内容为\'测试消息内容\', 确定按钮为\'确定\', 图标路径为\'./logo.ico\', 返回True\n          \n10.确认框: 界面*(\'确认框\', 标题, 消息内容, 确定按钮(默认\'确定\'), 取消按钮(默认\'取消\'), 图标路径(默认\'\'))\n代码演示: 界面*(\'确认框\', \'测试确认框\', \'测试确认消息\', \'确定\', \'取消\', \'./logo.ico\')\n运行结果: 弹出一个测试确认框, 标题为\'测试确认框\', 消息内容为\'测试确认消息\', 确定按钮为\'确定\', 取消按钮为\'取消\', 图标路径为\'./logo.ico\', 返回True或False\n\n11.运行: 界面*(\'运行\', 容器)\n代码演示: 界面*(\'运行\', 窗口对象)\n运行结果: 启动程序, 显示窗口。\n\n12.帮助: 界面*(\'帮助\')\n代码演示: 界面*(\'帮助\')\n运行结果: 显示该帮助文档。\n\n\n完整示例:\n@界面库\n窗口对象 = 界面*(\'窗口\', \'登录界面\', 100, 100, 320, 200)\n界面*(\'标签\', 窗口对象, \'账号:\', 50, 30, 30, 30)\n界面*(\'标签\', 窗口对象, \'密码:\', 50, 80, 30, 30)\n账号输入框 = 界面*(\'输入框\', 窗口对象, \'请输入用户名\', 100, 30, 180, 30)\n密码输入框 = 界面*(\'输入框\', 窗口对象, \'请输入密码\', 100, 80, 180, 30)\n函数 登录():\n    确认 = 界面*(\'确认框\', \'提示\', \'确认要登录吗?\')\n    如果 不是 确认: 返回\n    如果 界面*(\'内容\', 账号输入框) == "admin" 并且 界面*(\'内容\', 密码输入框) == "123456": 界面*(\'弹窗\', \'提示\', \'登录成功\')\n    否则: 界面*(\'弹窗\', \'提示\', \'用户名或密码错误\')\n界面*(\'按钮\', 窗口对象, \'登录\', 100, 130, 100, 40, 登录)\n界面*(\'运行\', 窗口对象)\n\n          \n注: 有关联的函数, 运行必须在最后一行, 否则窗口不会显示。\n          \n')
def helpNetworkLibrary():print(_A+_B*60+'网络库使用说明'+_B*60+_A);print("\n该库提供了一个函数, 网络*, 用于执行各种类型的网络操作。\n\n网络* 支持的操作类型包括:\n1.路由\n2.启动\n3.post\n4.get\n5.帮助\n\n使用方法:\n导入该库: @网络库\n\n1.路由: 网络*('路由', 接口路径, 逻辑函数, 请求方法('POST/GET'))\n代码演示: 网络*('路由', '/api/test', 处理函数, 'GET')\n运行结果: 注册接口 /api/test, 处理请求数据并返回结果, 请求方法为 GET。\n          \n2.启动: 网络*('启动', 服务器地址, 端口号)\n代码演示: 网络*('启动', '127.0.0.1', 8000)\n运行结果: 启动服务器, 监听 127.0.0.1:8000。\n          \n3.post: 网络*('post', 请求地址, 请求数据)\n代码演示: 网络*('post', 'http://127.0.0.1:8000/api/test', {'名字': 'fjh', '年龄': 20})\n运行结果: 发起 POST 请求 http://127.0.0.1:8000/api/test, 请求数据为 {'名字': 'fjh', '年龄': 20}。\n          \n4.get: 网络*('get', 请求地址, 请求参数)\n代码演示: 网络*('get', 'http://127.0.0.1:8000/api/test', {'名字': 'fjh', '年龄': 20})\n运行结果: 发起 GET 请求 http://127.0.0.1:8000/api/test, 请求参数为 {'名字': 'fjh', '年龄': 20}。\n\n5.帮助: 网络*('帮助')\n代码演示: 网络*('帮助')\n运行结果: 显示该帮助文档。\n\n完整示例:\n@网络库\n          \n异步 函数 get处理请求(接收请求数据):\n    输出*(接收请求数据)\n    返回 {'数据': '处理成功, 我已经收到请求数据!'}\n          \n异步 函数 post处理请求(接收请求数据):\n    输出*(接收请求数据)\n    返回 {'数据': '处理成功, 我已经收到请求数据!'}\n          \n网络*('路由', '/api/get', get处理请求, 'GET')\n网络*('路由', '/api/post', post处理请求, 'POST')\n          \n网络*('启动', '127.0.0.1', 8000)\n          \nget结果 = 网络*('get', 'http://127.0.0.1:8000/api/get', {'名字': 'fjh', '年龄': 20})\n输出*(get结果)\n          \npost结果 = 网络*('post', 'http://127.0.0.1:8000/api/post', {'名字': 'fjh', '年龄': 20})\n输出*(post结果)\n\n注: 逻辑函数必须是异步函数, 接收请求数据并返回响应数据。\n          \n")
def helpSystemLibrary():print(_A+_B*60+'系统库使用说明'+_B*60+_A);print("\n该库提供了 系统* 函数, 分别用于获取时间和执行系统操作。\n\n系统* 支持的操作类型包括:\n1.获取时间戳\n2.格式化时间戳\n3.计时器\n4.无限计时\n5.停止计时\n6.暂停程序\n7.打开网页\n8.控制桌面\n9.获取进程\n10.杀死进程\n11.定时关机\n12.任务管理器\n13.循环\n14.帮助\n          \n使用方法:\n导入该库: @系统库\n\n1.获取时间戳: 系统*('获取')\n代码演示: 系统*('获取')\n运行结果: 返回当前时间戳\n          \n2.格式化时间戳: 系统*('格式化', 时间戳(默认None, 若不指定则获取当前时间))\n代码演示: 系统*('格式化', 1621512465)\n运行结果: 返回格式化后的时间字符串\n\n3.计时器: 系统*('计时器', 函数, 间隔毫秒时间, 结束毫秒时间)\n代码演示: 系统*('计时器', 匿名: 输出*('hello world'), 1000, 5000)\n运行结果: 打印'hello world' 5秒后停止\n          \n4.无限计时: 系统*('无限计时', 函数, 间隔毫秒时间)\n代码演示: 系统*('无限计时', 匿名: 输出*('hello world'), 1000)\n运行结果: 打印'hello world' 每隔1秒输出一次, 返回计时器ID\n          \n5.停止计时: 系统*('停止计时', 计时器ID)\n代码演示: 系统*('停止计时', 计时器ID)\n运行结果: 停止计时器\n\n6.暂停程序: 系统*('暂停程序', 毫秒时间)\n代码演示: 系统*('暂停程序', 5000)\n运行结果: 程序暂停5秒\n\n7.打开网页: 系统*('打开网页', 网址)\n代码演示: 系统*('打开网页', 'https://www.baidu.com')\n运行结果: 打开百度网页\n\n8.控制桌面: 系统*('控制桌面', 真的 / 假的)\n代码演示: 系统*('控制桌面', 假的)\n运行结果: 关闭桌面\n\n9.获取进程: 系统*('获取进程')\n代码演示: 系统*('获取进程')\n运行结果: 打印当前进程列表\n\n10.杀死进程: 系统*('杀死进程', 进程名称(若不指定则杀死所有进程))\n代码演示: 系统*('杀死进程', 'notepad.exe')\n运行结果: 杀死notepad进程\n\n11.定时关机: 系统*('定时关机', 毫秒时间)\n代码演示: 系统*('定时关机', 60000)\n运行结果: 定时关机1分钟\n\n12.任务管理器: 系统*('任务管理器', 真的 / 假的)\n代码演示: 系统*('任务管理器', 假的)\n运行结果: 禁用任务管理器\n\n13.循环: 系统*('循环', 循环次数 / 假的, 函数)\n代码演示: 系统*('循环', 5, 匿名: 输出*('hello world'))\n          \n14.帮助: 系统*('帮助')\n代码演示: 系统*('帮助')\n运行结果: 显示该帮助文档\n\n注: 杀死所有进程容易造成系统崩溃, 请谨慎使用。\n")
def helpRandomLibrary():print(_A+_B*60+'随机库使用说明'+_B*60+_A);print("\n该库提供了 随机* 函数, 分别用于获取时间和执行随机操作。\n\n随机* 支持的操作类型包括:\n1.整数\n2.浮点数\n3.元素\n4.列表\n5.帮助     \n          \n使用方法:\n导入该库: @随机库\n\n1.整数: 随机*('整数', 最小值, 最大值)\n代码演示: 随机*('整数', 1, 10)\n运行结果: 返回一个随机整数\n          \n2.浮点数: 随机*('浮点数', 最小值, 最大值)\n代码演示: 随机*('浮点数', 1.0, 10.0)\n运行结果: 返回一个随机浮点数\n          \n3.元素: 随机*('元素', 元素1, 元素2, 元素3, ...)\n代码演示: 随机*('元素', 'apple', 'banana', 'orange')\n运行结果: 返回一个随机元素\n          \n4.列表: 随机*('列表', 元素1, 元素2, 元素3, ...)\n代码演示: 随机*('列表', 'apple', 'banana', 'orange')\n运行结果: 返回一个随机列表\n          \n5.帮助: 随机*('帮助')\n代码演示: 随机*('帮助')\n运行结果: 打印帮助文档\n")
def Helps():helpKeywordLibrary();helpAutomationLibrary();helpDocumentLibrary();helpInterfaceLibrary();helpNetworkLibrary();helpSystemLibrary();helpConcurrentLibraries();helpRandomLibrary();print(_A+_B*60+'帮助文档'+_B*60+_A);print('欢迎使用熊猫编辑器！');print("你可以输入'帮助'查看各个库的使用说明。");input('\n按Enter键退出。\n')
Helps()
'''


# 内置库
BuiltinLibraries = {}

All = DocumentLibrary + SystemLibrary + NetworkLibrary + InterfaceLibrary + AutomationLibrary + ConcurrentLibraries

# 基础库
BuiltinLibraries.update(
    {
        "@库": All,
        "@帮助": Helps,
        "@文件库": DocumentLibrary,
        "@系统库": SystemLibrary,
        "@网络库": NetworkLibrary,
        "@界面库": InterfaceLibrary,
        "@自动化库": AutomationLibrary,
        "@并发库": ConcurrentLibraries,
        "@随机库": RandomLibrary,
    }
)


