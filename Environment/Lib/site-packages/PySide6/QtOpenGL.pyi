# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations
"""
This file contains the exact signatures for all functions in module
PySide6.QtOpenGL, except for defaults which are replaced by "...".

# mypy: disable-error-code="override, overload-overlap"
"""

# Module `PySide6.QtOpenGL`

import PySide6.QtOpenGL
import PySide6.QtCore
import PySide6.QtGui

import enum
import typing
import collections.abc
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


class QAbstractOpenGLFunctions(Shiboken.Object):

    def __init__(self, /) -> None: ...

    def initializeOpenGLFunctions(self, /) -> bool: ...
    def isInitialized(self, /) -> bool: ...
    def owningContext(self, /) -> PySide6.QtGui.QOpenGLContext: ...
    def setOwningContext(self, context: PySide6.QtGui.QOpenGLContext, /) -> None: ...


class QIntList: ...


class QOpenGLBuffer(Shiboken.Object):

    class Access(enum.Enum):

        ReadOnly                  = ...  # 0x88b8
        WriteOnly                 = ...  # 0x88b9
        ReadWrite                 = ...  # 0x88ba

    class RangeAccessFlag(enum.Flag):

        RangeRead                 = ...  # 0x1
        RangeWrite                = ...  # 0x2
        RangeInvalidate           = ...  # 0x4
        RangeInvalidateBuffer     = ...  # 0x8
        RangeFlushExplicit        = ...  # 0x10
        RangeUnsynchronized       = ...  # 0x20

    class Type(enum.Enum):

        VertexBuffer              = ...  # 0x8892
        IndexBuffer               = ...  # 0x8893
        PixelPackBuffer           = ...  # 0x88eb
        PixelUnpackBuffer         = ...  # 0x88ec

    class UsagePattern(enum.Enum):

        StreamDraw                = ...  # 0x88e0
        StreamRead                = ...  # 0x88e1
        StreamCopy                = ...  # 0x88e2
        StaticDraw                = ...  # 0x88e4
        StaticRead                = ...  # 0x88e5
        StaticCopy                = ...  # 0x88e6
        DynamicDraw               = ...  # 0x88e8
        DynamicRead               = ...  # 0x88e9
        DynamicCopy               = ...  # 0x88ea


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtOpenGL.QOpenGLBuffer, /) -> None: ...
    @typing.overload
    def __init__(self, type: PySide6.QtOpenGL.QOpenGLBuffer.Type, /) -> None: ...

    @typing.overload
    def allocate(self, data: bytes, count: int, /) -> None: ...
    @typing.overload
    def allocate(self, count: int, /) -> None: ...
    def bind(self, /) -> bool: ...
    def bufferId(self, /) -> int: ...
    def create(self, /) -> bool: ...
    def destroy(self, /) -> None: ...
    def isCreated(self, /) -> bool: ...
    def map(self, access: PySide6.QtOpenGL.QOpenGLBuffer.Access, /) -> int: ...
    def mapRange(self, offset: int, count: int, access: PySide6.QtOpenGL.QOpenGLBuffer.RangeAccessFlag, /) -> int: ...
    def read(self, offset: int, data: int, count: int, /) -> bool: ...
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    @staticmethod
    def release(type: PySide6.QtOpenGL.QOpenGLBuffer.Type, /) -> None: ...  # type: ignore[misc, overload-cannot-match]
    @typing.overload  # type: ignore[misc, overload-cannot-match]
    def release(self, /) -> None: ...  # type: ignore[misc, overload-cannot-match]
    def setUsagePattern(self, value: PySide6.QtOpenGL.QOpenGLBuffer.UsagePattern, /) -> None: ...
    def size(self, /) -> int: ...
    def swap(self, other: PySide6.QtOpenGL.QOpenGLBuffer, /) -> None: ...
    def type(self, /) -> PySide6.QtOpenGL.QOpenGLBuffer.Type: ...
    def unmap(self, /) -> bool: ...
    def usagePattern(self, /) -> PySide6.QtOpenGL.QOpenGLBuffer.UsagePattern: ...
    def write(self, offset: int, data: int, count: int, /) -> None: ...


class QOpenGLDebugLogger(PySide6.QtCore.QObject):

    messageLogged            : typing.ClassVar[Signal] = ... # messageLogged(QOpenGLDebugMessage)

    class LoggingMode(enum.Enum):

        AsynchronousLogging       = ...  # 0x0
        SynchronousLogging        = ...  # 0x1


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ..., *, loggingMode: PySide6.QtOpenGL.QOpenGLDebugLogger.LoggingMode | None = ...) -> None: ...

    @typing.overload
    def disableMessages(self, /, sources: PySide6.QtOpenGL.QOpenGLDebugMessage.Source = ..., types: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ..., severities: PySide6.QtOpenGL.QOpenGLDebugMessage.Severity = ...) -> None: ...
    @typing.overload
    def disableMessages(self, ids: collections.abc.Sequence[int], /, sources: PySide6.QtOpenGL.QOpenGLDebugMessage.Source = ..., types: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ...) -> None: ...
    @typing.overload
    def enableMessages(self, /, sources: PySide6.QtOpenGL.QOpenGLDebugMessage.Source = ..., types: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ..., severities: PySide6.QtOpenGL.QOpenGLDebugMessage.Severity = ...) -> None: ...
    @typing.overload
    def enableMessages(self, ids: collections.abc.Sequence[int], /, sources: PySide6.QtOpenGL.QOpenGLDebugMessage.Source = ..., types: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ...) -> None: ...
    def initialize(self, /) -> bool: ...
    def isLogging(self, /) -> bool: ...
    def logMessage(self, debugMessage: PySide6.QtOpenGL.QOpenGLDebugMessage, /) -> None: ...
    def loggedMessages(self, /) -> typing.List[PySide6.QtOpenGL.QOpenGLDebugMessage]: ...
    def loggingMode(self, /) -> PySide6.QtOpenGL.QOpenGLDebugLogger.LoggingMode: ...
    def maximumMessageLength(self, /) -> int: ...
    def popGroup(self, /) -> None: ...
    def pushGroup(self, name: str, /, id: int | None = ..., source: PySide6.QtOpenGL.QOpenGLDebugMessage.Source = ...) -> None: ...
    def startLogging(self, /, loggingMode: PySide6.QtOpenGL.QOpenGLDebugLogger.LoggingMode = ...) -> None: ...
    def stopLogging(self, /) -> None: ...


class QOpenGLDebugMessage(Shiboken.Object):

    class Severity(enum.Flag):

        AnySeverity               = ...  # -1
        InvalidSeverity           = ...  # 0x0
        HighSeverity              = ...  # 0x1
        MediumSeverity            = ...  # 0x2
        LowSeverity               = ...  # 0x4
        LastSeverity              = ...  # 0x8
        NotificationSeverity      = ...  # 0x8

    class Source(enum.Flag):

        AnySource                 = ...  # -1
        InvalidSource             = ...  # 0x0
        APISource                 = ...  # 0x1
        WindowSystemSource        = ...  # 0x2
        ShaderCompilerSource      = ...  # 0x4
        ThirdPartySource          = ...  # 0x8
        ApplicationSource         = ...  # 0x10
        LastSource                = ...  # 0x20
        OtherSource               = ...  # 0x20

    class Type(enum.Flag):

        AnyType                   = ...  # -1
        InvalidType               = ...  # 0x0
        ErrorType                 = ...  # 0x1
        DeprecatedBehaviorType    = ...  # 0x2
        UndefinedBehaviorType     = ...  # 0x4
        PortabilityType           = ...  # 0x8
        PerformanceType           = ...  # 0x10
        OtherType                 = ...  # 0x20
        MarkerType                = ...  # 0x40
        GroupPushType             = ...  # 0x80
        GroupPopType              = ...  # 0x100
        LastType                  = ...  # 0x100


    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, debugMessage: PySide6.QtOpenGL.QOpenGLDebugMessage, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, debugMessage: PySide6.QtOpenGL.QOpenGLDebugMessage, /) -> bool: ...
    def __ne__(self, debugMessage: PySide6.QtOpenGL.QOpenGLDebugMessage, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    @staticmethod
    def createApplicationMessage(text: str, /, id: int | None = ..., severity: PySide6.QtOpenGL.QOpenGLDebugMessage.Severity = ..., type: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ...) -> PySide6.QtOpenGL.QOpenGLDebugMessage: ...
    @staticmethod
    def createThirdPartyMessage(text: str, /, id: int | None = ..., severity: PySide6.QtOpenGL.QOpenGLDebugMessage.Severity = ..., type: PySide6.QtOpenGL.QOpenGLDebugMessage.Type = ...) -> PySide6.QtOpenGL.QOpenGLDebugMessage: ...
    def id(self, /) -> int: ...
    def message(self, /) -> str: ...
    def severity(self, /) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Severity: ...
    def source(self, /) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Source: ...
    def swap(self, other: PySide6.QtOpenGL.QOpenGLDebugMessage, /) -> None: ...
    def type(self, /) -> PySide6.QtOpenGL.QOpenGLDebugMessage.Type: ...


class QOpenGLFramebufferObject(Shiboken.Object):

    class Attachment(enum.Enum):

        NoAttachment              = ...  # 0x0
        CombinedDepthStencil      = ...  # 0x1
        Depth                     = ...  # 0x2

    class FramebufferRestorePolicy(enum.Enum):

        DontRestoreFramebufferBinding = ...  # 0x0
        RestoreFramebufferBindingToDefault = ...  # 0x1
        RestoreFrameBufferBinding = ...  # 0x2


    @typing.overload
    def __init__(self, size: PySide6.QtCore.QSize, attachment: PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, /, target: int = ..., internalFormat: int | None = ...) -> None: ...
    @typing.overload
    def __init__(self, size: PySide6.QtCore.QSize, format: PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat, /) -> None: ...
    @typing.overload
    def __init__(self, size: PySide6.QtCore.QSize, /, target: int = ...) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, attachment: PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, /, target: int = ..., internalFormat: int | None = ...) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, format: PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat, /) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, /, target: int = ...) -> None: ...

    @typing.overload
    def addColorAttachment(self, size: PySide6.QtCore.QSize, /, internalFormat: int | None = ...) -> None: ...
    @typing.overload
    def addColorAttachment(self, width: int, height: int, /, internalFormat: int | None = ...) -> None: ...
    def attachment(self, /) -> PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment: ...
    def bind(self, /) -> bool: ...
    @staticmethod
    def bindDefault() -> bool: ...
    @typing.overload
    @staticmethod
    def blitFramebuffer(target: PySide6.QtOpenGL.QOpenGLFramebufferObject, source: PySide6.QtOpenGL.QOpenGLFramebufferObject, /, buffers: int = ..., filter: int = ...) -> None: ...
    @typing.overload
    @staticmethod
    def blitFramebuffer(target: PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect: PySide6.QtCore.QRect, source: PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect: PySide6.QtCore.QRect, /, buffers: int = ..., filter: int = ...) -> None: ...
    @typing.overload
    @staticmethod
    def blitFramebuffer(target: PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect: PySide6.QtCore.QRect, source: PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect: PySide6.QtCore.QRect, buffers: int, filter: int, readColorAttachmentIndex: int, drawColorAttachmentIndex: int, /) -> None: ...
    @typing.overload
    @staticmethod
    def blitFramebuffer(target: PySide6.QtOpenGL.QOpenGLFramebufferObject, targetRect: PySide6.QtCore.QRect, source: PySide6.QtOpenGL.QOpenGLFramebufferObject, sourceRect: PySide6.QtCore.QRect, buffers: int, filter: int, readColorAttachmentIndex: int, drawColorAttachmentIndex: int, restorePolicy: PySide6.QtOpenGL.QOpenGLFramebufferObject.FramebufferRestorePolicy, /) -> None: ...
    def format(self, /) -> PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat: ...
    def handle(self, /) -> int: ...
    @staticmethod
    def hasOpenGLFramebufferBlit() -> bool: ...
    @staticmethod
    def hasOpenGLFramebufferObjects() -> bool: ...
    def height(self, /) -> int: ...
    def isBound(self, /) -> bool: ...
    def isValid(self, /) -> bool: ...
    def release(self, /) -> bool: ...
    def setAttachment(self, attachment: PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, /) -> None: ...
    def size(self, /) -> PySide6.QtCore.QSize: ...
    def sizes(self, /) -> typing.List[PySide6.QtCore.QSize]: ...
    @typing.overload
    def takeTexture(self, /) -> int: ...
    @typing.overload
    def takeTexture(self, colorAttachmentIndex: int, /) -> int: ...
    def texture(self, /) -> int: ...
    def textures(self, /) -> typing.List[int]: ...
    @typing.overload
    def toImage(self, /, flipped: bool = ...) -> PySide6.QtGui.QImage: ...
    @typing.overload
    def toImage(self, flipped: bool, colorAttachmentIndex: int, /) -> PySide6.QtGui.QImage: ...
    def width(self, /) -> int: ...


class QOpenGLFramebufferObjectFormat(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, other: PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat, /) -> bool: ...
    def __ne__(self, other: PySide6.QtOpenGL.QOpenGLFramebufferObjectFormat, /) -> bool: ...
    def attachment(self, /) -> PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment: ...
    def internalTextureFormat(self, /) -> int: ...
    def mipmap(self, /) -> bool: ...
    def samples(self, /) -> int: ...
    def setAttachment(self, attachment: PySide6.QtOpenGL.QOpenGLFramebufferObject.Attachment, /) -> None: ...
    def setInternalTextureFormat(self, internalTextureFormat: int, /) -> None: ...
    def setMipmap(self, enabled: bool, /) -> None: ...
    def setSamples(self, samples: int, /) -> None: ...
    def setTextureTarget(self, target: int, /) -> None: ...
    def textureTarget(self, /) -> int: ...


class QOpenGLFunctions_1_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_1_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_1_2(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_1_3(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_1_4(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_1_5(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_2_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_2_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_0(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_1(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_2_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_2_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_3_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_3_3_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_0_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_0_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_1_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_1_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_2_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_2_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_3_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_3_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, mode: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, mode: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, index: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_4_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindBuffersBase(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glBindBuffersRange(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], sizes: collections.abc.Sequence[int], /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindImageTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindSamplers(self, first: int, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBindVertexBuffers(self, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClearTexImage(self, texture: int, level: int, format: int, type: int, data: int, /) -> None: ...
    def glClearTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, data: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDebugMessageControl(self, source: int, type: int, severity: int, count: int, ids: collections.abc.Sequence[int], enabled: int, /) -> None: ...
    def glDebugMessageInsert(self, source: int, type: int, id: int, severity: int, length: int, buf: bytes | bytearray | memoryview, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, buf: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glObjectLabel(self, identifier: int, name: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glObjectPtrLabel(self, ptr: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopDebugGroup(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushDebugGroup(self, source: int, id: int, length: int, message: bytes | bytearray | memoryview, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, src: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, maskNumber: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_4_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindBuffersBase(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glBindBuffersRange(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], sizes: collections.abc.Sequence[int], /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindImageTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindSamplers(self, first: int, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBindVertexBuffers(self, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClearTexImage(self, texture: int, level: int, format: int, type: int, data: int, /) -> None: ...
    def glClearTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, data: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDebugMessageControl(self, source: int, type: int, severity: int, count: int, ids: collections.abc.Sequence[int], enabled: int, /) -> None: ...
    def glDebugMessageInsert(self, source: int, type: int, id: int, severity: int, length: int, buf: bytes | bytearray | memoryview, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, buf: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glObjectLabel(self, identifier: int, name: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glObjectPtrLabel(self, ptr: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopDebugGroup(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushDebugGroup(self, source: int, id: int, length: int, message: bytes | bytearray | memoryview, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, src: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, maskNumber: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_5_Compatibility(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glAccum(self, op: int, value: float, /) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAlphaFunc(self, func: int, ref: float, /) -> None: ...
    def glArrayElement(self, i: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBegin(self, mode: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindBuffersBase(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glBindBuffersRange(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], sizes: collections.abc.Sequence[int], /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindImageTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindSamplers(self, first: int, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTextureUnit(self, unit: int, texture: int, /) -> None: ...
    def glBindTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBindVertexBuffers(self, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glBlitNamedFramebuffer(self, readFramebuffer: int, drawFramebuffer: int, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCallList(self, list: int, /) -> None: ...
    def glCallLists(self, n: int, type: int, lists: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glCheckNamedFramebufferStatus(self, framebuffer: int, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearAccum(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearIndex(self, c: float, /) -> None: ...
    def glClearNamedBufferData(self, buffer: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearNamedFramebufferfi(self, framebuffer: int, buffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearNamedFramebufferfv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearNamedFramebufferiv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearNamedFramebufferuiv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClearTexImage(self, texture: int, level: int, format: int, type: int, data: int, /) -> None: ...
    def glClearTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, data: int, /) -> None: ...
    def glClientActiveTexture(self, texture: int, /) -> None: ...
    def glClipControl(self, origin: int, depth: int, /) -> None: ...
    def glClipPlane(self, plane: int, equation: collections.abc.Sequence[float], /) -> None: ...
    def glColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4b(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4d(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4f(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glColor4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glColor4i(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4s(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4ub(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glColor4ui(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColor4us(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColor4usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glColorMaterial(self, face: int, mode: int, /) -> None: ...
    def glColorP3ui(self, type: int, color: int, /) -> None: ...
    def glColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorP4ui(self, type: int, color: int, /) -> None: ...
    def glColorP4uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glColorSubTable(self, target: int, start: int, count: int, format: int, type: int, data: int, /) -> None: ...
    def glColorTable(self, target: int, internalformat: int, width: int, format: int, type: int, table: int, /) -> None: ...
    def glColorTableParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glColorTableParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage1D(self, texture: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glConvolutionFilter1D(self, target: int, internalformat: int, width: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, image: int, /) -> None: ...
    def glConvolutionParameterf(self, target: int, pname: int, params: float, /) -> None: ...
    def glConvolutionParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glConvolutionParameteri(self, target: int, pname: int, params: int, /) -> None: ...
    def glConvolutionParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glCopyColorSubTable(self, target: int, start: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyColorTable(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter1D(self, target: int, internalformat: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyConvolutionFilter2D(self, target: int, internalformat: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyPixels(self, x: int, y: int, width: int, height: int, type: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTextureSubImage1D(self, texture: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDebugMessageControl(self, source: int, type: int, severity: int, count: int, ids: collections.abc.Sequence[int], enabled: int, /) -> None: ...
    def glDebugMessageInsert(self, source: int, type: int, id: int, severity: int, length: int, buf: bytes | bytearray | memoryview, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteLists(self, list: int, range: int, /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableClientState(self, array: int, /) -> None: ...
    def glDisableVertexArrayAttrib(self, vaobj: int, index: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, buf: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawPixels(self, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEdgeFlag(self, flag: int, /) -> None: ...
    def glEdgeFlagPointer(self, stride: int, pointer: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableClientState(self, array: int, /) -> None: ...
    def glEnableVertexArrayAttrib(self, vaobj: int, index: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEnd(self, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndList(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glEvalCoord1d(self, u: float, /) -> None: ...
    def glEvalCoord1dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord1f(self, u: float, /) -> None: ...
    def glEvalCoord1fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2d(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2dv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalCoord2f(self, u: float, v: float, /) -> None: ...
    def glEvalCoord2fv(self, u: collections.abc.Sequence[float], /) -> None: ...
    def glEvalMesh1(self, mode: int, i1: int, i2: int, /) -> None: ...
    def glEvalMesh2(self, mode: int, i1: int, i2: int, j1: int, j2: int, /) -> None: ...
    def glEvalPoint1(self, i: int, /) -> None: ...
    def glEvalPoint2(self, i: int, j: int, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFogCoordPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glFogCoordd(self, coord: float, /) -> None: ...
    def glFogCoorddv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogCoordf(self, coord: float, /) -> None: ...
    def glFogCoordfv(self, coord: collections.abc.Sequence[float], /) -> None: ...
    def glFogf(self, pname: int, param: float, /) -> None: ...
    def glFogfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glFogi(self, pname: int, param: int, /) -> None: ...
    def glFogiv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glFrustum(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glGenLists(self, range: int, /) -> int: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGenerateTextureMipmap(self, texture: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetColorTable(self, target: int, format: int, type: int, table: int, /) -> None: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetCompressedTextureImage(self, texture: int, level: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetCompressedTextureSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetConvolutionFilter(self, target: int, format: int, type: int, image: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetGraphicsResetStatus(self, /) -> int: ...
    def glGetHistogram(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetMinmax(self, target: int, reset: int, format: int, type: int, values: int, /) -> None: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSeparableFilter(self, target: int, format: int, type: int, row: int, column: int, span: int, /) -> None: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetTextureImage(self, texture: int, level: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetTextureSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetnColorTable(self, target: int, format: int, type: int, bufSize: int, table: int, /) -> None: ...
    def glGetnCompressedTexImage(self, target: int, lod: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetnConvolutionFilter(self, target: int, format: int, type: int, bufSize: int, image: int, /) -> None: ...
    def glGetnHistogram(self, target: int, reset: int, format: int, type: int, bufSize: int, values: int, /) -> None: ...
    def glGetnMinmax(self, target: int, reset: int, format: int, type: int, bufSize: int, values: int, /) -> None: ...
    def glGetnSeparableFilter(self, target: int, format: int, type: int, rowBufSize: int, row: int, columnBufSize: int, column: int, span: int, /) -> None: ...
    def glGetnTexImage(self, target: int, level: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glHistogram(self, target: int, width: int, internalformat: int, sink: int, /) -> None: ...
    def glIndexMask(self, mask: int, /) -> None: ...
    def glIndexPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glIndexd(self, c: float, /) -> None: ...
    def glIndexdv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexf(self, c: float, /) -> None: ...
    def glIndexfv(self, c: collections.abc.Sequence[float], /) -> None: ...
    def glIndexi(self, c: int, /) -> None: ...
    def glIndexiv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexs(self, c: int, /) -> None: ...
    def glIndexsv(self, c: collections.abc.Sequence[int], /) -> None: ...
    def glIndexub(self, c: int, /) -> None: ...
    def glIndexubv(self, c: bytes | bytearray | memoryview, /) -> None: ...
    def glInitNames(self, /) -> None: ...
    def glInterleavedArrays(self, format: int, stride: int, pointer: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateNamedFramebufferData(self, framebuffer: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateNamedFramebufferSubData(self, framebuffer: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsList(self, list: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLightModelf(self, pname: int, param: float, /) -> None: ...
    def glLightModelfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLightModeli(self, pname: int, param: int, /) -> None: ...
    def glLightModeliv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLightf(self, light: int, pname: int, param: float, /) -> None: ...
    def glLightfv(self, light: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glLighti(self, light: int, pname: int, param: int, /) -> None: ...
    def glLightiv(self, light: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glLineStipple(self, factor: int, pattern: int, /) -> None: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glListBase(self, base: int, /) -> None: ...
    def glLoadIdentity(self, /) -> None: ...
    def glLoadMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadName(self, name: int, /) -> None: ...
    def glLoadTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLoadTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMap1d(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap1f(self, target: int, u1: float, u2: float, stride: int, order: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2d(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMap2f(self, target: int, u1: float, u2: float, ustride: int, uorder: int, v1: float, v2: float, vstride: int, vorder: int, points: collections.abc.Sequence[float], /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapGrid1d(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid1f(self, un: int, u1: float, u2: float, /) -> None: ...
    def glMapGrid2d(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapGrid2f(self, un: int, u1: float, u2: float, vn: int, v1: float, v2: float, /) -> None: ...
    def glMapNamedBuffer(self, buffer: int, access: int, /) -> int: ...
    def glMaterialf(self, face: int, pname: int, param: float, /) -> None: ...
    def glMaterialfv(self, face: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glMateriali(self, face: int, pname: int, param: int, /) -> None: ...
    def glMaterialiv(self, face: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glMatrixMode(self, mode: int, /) -> None: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMemoryBarrierByRegion(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMinmax(self, target: int, internalformat: int, sink: int, /) -> None: ...
    def glMultMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixd(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultTransposeMatrixf(self, m: collections.abc.Sequence[float], /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glMultiTexCoord1d(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1f(self, target: int, s: float, /) -> None: ...
    def glMultiTexCoord1fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord1i(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord1s(self, target: int, s: int, /) -> None: ...
    def glMultiTexCoord1sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2d(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2f(self, target: int, s: float, t: float, /) -> None: ...
    def glMultiTexCoord2fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord2i(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord2s(self, target: int, s: int, t: int, /) -> None: ...
    def glMultiTexCoord2sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3d(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3f(self, target: int, s: float, t: float, r: float, /) -> None: ...
    def glMultiTexCoord3fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord3i(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord3s(self, target: int, s: int, t: int, r: int, /) -> None: ...
    def glMultiTexCoord3sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4d(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4dv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4f(self, target: int, s: float, t: float, r: float, q: float, /) -> None: ...
    def glMultiTexCoord4fv(self, target: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glMultiTexCoord4i(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4iv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoord4s(self, target: int, s: int, t: int, r: int, q: int, /) -> None: ...
    def glMultiTexCoord4sv(self, target: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP1ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP1uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP2ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP2uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP3ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP3uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glMultiTexCoordP4ui(self, texture: int, type: int, coords: int, /) -> None: ...
    def glMultiTexCoordP4uiv(self, texture: int, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNamedFramebufferDrawBuffer(self, framebuffer: int, buf: int, /) -> None: ...
    def glNamedFramebufferDrawBuffers(self, framebuffer: int, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glNamedFramebufferParameteri(self, framebuffer: int, pname: int, param: int, /) -> None: ...
    def glNamedFramebufferReadBuffer(self, framebuffer: int, src: int, /) -> None: ...
    def glNamedFramebufferRenderbuffer(self, framebuffer: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glNamedFramebufferTexture(self, framebuffer: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glNamedFramebufferTextureLayer(self, framebuffer: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glNamedRenderbufferStorage(self, renderbuffer: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glNamedRenderbufferStorageMultisample(self, renderbuffer: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glNewList(self, list: int, mode: int, /) -> None: ...
    def glNormal3b(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glNormal3d(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3f(self, nx: float, ny: float, nz: float, /) -> None: ...
    def glNormal3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glNormal3i(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormal3s(self, nx: int, ny: int, nz: int, /) -> None: ...
    def glNormal3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glNormalP3ui(self, type: int, coords: int, /) -> None: ...
    def glNormalP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glNormalPointer(self, type: int, stride: int, pointer: int, /) -> None: ...
    def glObjectLabel(self, identifier: int, name: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glObjectPtrLabel(self, ptr: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glOrtho(self, left: float, right: float, bottom: float, top: float, zNear: float, zFar: float, /) -> None: ...
    def glPassThrough(self, token: float, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelMapfv(self, map: int, mapsize: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPixelMapuiv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelMapusv(self, map: int, mapsize: int, values: collections.abc.Sequence[int], /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPixelTransferf(self, pname: int, param: float, /) -> None: ...
    def glPixelTransferi(self, pname: int, param: int, /) -> None: ...
    def glPixelZoom(self, xfactor: float, yfactor: float, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopAttrib(self, /) -> None: ...
    def glPopClientAttrib(self, /) -> None: ...
    def glPopDebugGroup(self, /) -> None: ...
    def glPopMatrix(self, /) -> None: ...
    def glPopName(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glPrioritizeTextures(self, n: int, textures: collections.abc.Sequence[int], priorities: collections.abc.Sequence[float], /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushAttrib(self, mask: int, /) -> None: ...
    def glPushClientAttrib(self, mask: int, /) -> None: ...
    def glPushDebugGroup(self, source: int, id: int, length: int, message: bytes | bytearray | memoryview, /) -> None: ...
    def glPushMatrix(self, /) -> None: ...
    def glPushName(self, name: int, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glRasterPos2d(self, x: float, y: float, /) -> None: ...
    def glRasterPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2f(self, x: float, y: float, /) -> None: ...
    def glRasterPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos2i(self, x: int, y: int, /) -> None: ...
    def glRasterPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos2s(self, x: int, y: int, /) -> None: ...
    def glRasterPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glRasterPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glRasterPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glRasterPos4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glRasterPos4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glRasterPos4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glRasterPos4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glReadBuffer(self, src: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReadnPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, bufSize: int, data: int, /) -> None: ...
    def glRectd(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectdv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRectf(self, x1: float, y1: float, x2: float, y2: float, /) -> None: ...
    def glRectfv(self, v1: collections.abc.Sequence[float], v2: collections.abc.Sequence[float], /) -> None: ...
    def glRecti(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectiv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glRects(self, x1: int, y1: int, x2: int, y2: int, /) -> None: ...
    def glRectsv(self, v1: collections.abc.Sequence[int], v2: collections.abc.Sequence[int], /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderMode(self, mode: int, /) -> int: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResetHistogram(self, target: int, /) -> None: ...
    def glResetMinmax(self, target: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glRotated(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glRotatef(self, angle: float, x: float, y: float, z: float, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, maskNumber: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScaled(self, x: float, y: float, z: float, /) -> None: ...
    def glScalef(self, x: float, y: float, z: float, /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3b(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3bv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3d(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3f(self, red: float, green: float, blue: float, /) -> None: ...
    def glSecondaryColor3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glSecondaryColor3i(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3s(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3ub(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3ubv(self, v: bytes | bytearray | memoryview, /) -> None: ...
    def glSecondaryColor3ui(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3uiv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColor3us(self, red: int, green: int, blue: int, /) -> None: ...
    def glSecondaryColor3usv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorP3ui(self, type: int, color: int, /) -> None: ...
    def glSecondaryColorP3uiv(self, type: int, color: collections.abc.Sequence[int], /) -> None: ...
    def glSecondaryColorPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glSeparableFilter2D(self, target: int, internalformat: int, width: int, height: int, format: int, type: int, row: int, column: int, /) -> None: ...
    def glShadeModel(self, mode: int, /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexCoord1d(self, s: float, /) -> None: ...
    def glTexCoord1dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1f(self, s: float, /) -> None: ...
    def glTexCoord1fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord1i(self, s: int, /) -> None: ...
    def glTexCoord1iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord1s(self, s: int, /) -> None: ...
    def glTexCoord1sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2d(self, s: float, t: float, /) -> None: ...
    def glTexCoord2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2f(self, s: float, t: float, /) -> None: ...
    def glTexCoord2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord2i(self, s: int, t: int, /) -> None: ...
    def glTexCoord2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord2s(self, s: int, t: int, /) -> None: ...
    def glTexCoord2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3d(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3f(self, s: float, t: float, r: float, /) -> None: ...
    def glTexCoord3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord3i(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord3s(self, s: int, t: int, r: int, /) -> None: ...
    def glTexCoord3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4d(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4f(self, s: float, t: float, r: float, q: float, /) -> None: ...
    def glTexCoord4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glTexCoord4i(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoord4s(self, s: int, t: int, r: int, q: int, /) -> None: ...
    def glTexCoord4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP1ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP1uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP2ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP2uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP3ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP3uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordP4ui(self, type: int, coords: int, /) -> None: ...
    def glTexCoordP4uiv(self, type: int, coords: collections.abc.Sequence[int], /) -> None: ...
    def glTexCoordPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glTexEnvf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexEnvfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexEnvi(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexEnviv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexGend(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGendv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGenf(self, coord: int, pname: int, param: float, /) -> None: ...
    def glTexGenfv(self, coord: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexGeni(self, coord: int, pname: int, param: int, /) -> None: ...
    def glTexGeniv(self, coord: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureBarrier(self, /) -> None: ...
    def glTextureBuffer(self, texture: int, internalformat: int, buffer: int, /) -> None: ...
    def glTextureParameterIiv(self, texture: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTextureParameterIuiv(self, texture: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTextureParameterf(self, texture: int, pname: int, param: float, /) -> None: ...
    def glTextureParameterfv(self, texture: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glTextureParameteri(self, texture: int, pname: int, param: int, /) -> None: ...
    def glTextureParameteriv(self, texture: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glTextureStorage1D(self, texture: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTextureStorage2D(self, texture: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTextureStorage2DMultisample(self, texture: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTextureStorage3D(self, texture: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTextureStorage3DMultisample(self, texture: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTextureSubImage1D(self, texture: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glTransformFeedbackBufferBase(self, xfb: int, index: int, buffer: int, /) -> None: ...
    def glTranslated(self, x: float, y: float, z: float, /) -> None: ...
    def glTranslatef(self, x: float, y: float, z: float, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUnmapNamedBuffer(self, buffer: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertex2d(self, x: float, y: float, /) -> None: ...
    def glVertex2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2f(self, x: float, y: float, /) -> None: ...
    def glVertex2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex2i(self, x: int, y: int, /) -> None: ...
    def glVertex2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex2s(self, x: int, y: int, /) -> None: ...
    def glVertex2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3d(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3f(self, x: float, y: float, z: float, /) -> None: ...
    def glVertex3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex3i(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex3s(self, x: int, y: int, z: int, /) -> None: ...
    def glVertex3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4d(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4f(self, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertex4fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertex4i(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertex4s(self, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertex4sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexArrayAttribBinding(self, vaobj: int, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexArrayAttribFormat(self, vaobj: int, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayAttribIFormat(self, vaobj: int, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayAttribLFormat(self, vaobj: int, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayBindingDivisor(self, vaobj: int, bindingindex: int, divisor: int, /) -> None: ...
    def glVertexArrayElementBuffer(self, vaobj: int, buffer: int, /) -> None: ...
    def glVertexArrayVertexBuffers(self, vaobj: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glVertexP2ui(self, type: int, value: int, /) -> None: ...
    def glVertexP2uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP3ui(self, type: int, value: int, /) -> None: ...
    def glVertexP3uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexP4ui(self, type: int, value: int, /) -> None: ...
    def glVertexP4uiv(self, type: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexPointer(self, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2d(self, x: float, y: float, /) -> None: ...
    def glWindowPos2dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2f(self, x: float, y: float, /) -> None: ...
    def glWindowPos2fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos2i(self, x: int, y: int, /) -> None: ...
    def glWindowPos2iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos2s(self, x: int, y: int, /) -> None: ...
    def glWindowPos2sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3d(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3dv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3f(self, x: float, y: float, z: float, /) -> None: ...
    def glWindowPos3fv(self, v: collections.abc.Sequence[float], /) -> None: ...
    def glWindowPos3i(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3iv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def glWindowPos3s(self, x: int, y: int, z: int, /) -> None: ...
    def glWindowPos3sv(self, v: collections.abc.Sequence[int], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLFunctions_4_5_Core(PySide6.QtOpenGL.QAbstractOpenGLFunctions):

    def __init__(self, /) -> None: ...

    def glActiveShaderProgram(self, pipeline: int, program: int, /) -> None: ...
    def glActiveTexture(self, texture: int, /) -> None: ...
    def glAttachShader(self, program: int, shader: int, /) -> None: ...
    def glBeginConditionalRender(self, id: int, mode: int, /) -> None: ...
    def glBeginQuery(self, target: int, id: int, /) -> None: ...
    def glBeginQueryIndexed(self, target: int, index: int, id: int, /) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int, /) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindBuffer(self, target: int, buffer: int, /) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int, /) -> None: ...
    def glBindBuffersBase(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glBindBuffersRange(self, target: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], sizes: collections.abc.Sequence[int], /) -> None: ...
    def glBindFragDataLocation(self, program: int, color: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFragDataLocationIndexed(self, program: int, colorNumber: int, index: int, name: bytes | bytearray | memoryview, /) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int, /) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int, /) -> None: ...
    def glBindImageTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindProgramPipeline(self, pipeline: int, /) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int, /) -> None: ...
    def glBindSampler(self, unit: int, sampler: int, /) -> None: ...
    def glBindSamplers(self, first: int, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glBindTexture(self, target: int, texture: int, /) -> None: ...
    def glBindTextureUnit(self, unit: int, texture: int, /) -> None: ...
    def glBindTextures(self, first: int, count: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int, /) -> None: ...
    def glBindVertexArray(self, array: int, /) -> None: ...
    def glBindVertexBuffers(self, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glBlendEquation(self, mode: int, /) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int, /) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int, /) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int, /) -> None: ...
    def glBlendFuncSeparate(self, sfactorRGB: int, dfactorRGB: int, sfactorAlpha: int, dfactorAlpha: int, /) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int, /) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int, /) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glBlitNamedFramebuffer(self, readFramebuffer: int, drawFramebuffer: int, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int, /) -> None: ...
    def glCheckFramebufferStatus(self, target: int, /) -> int: ...
    def glCheckNamedFramebufferStatus(self, framebuffer: int, target: int, /) -> int: ...
    def glClampColor(self, target: int, clamp: int, /) -> None: ...
    def glClear(self, mask: int, /) -> None: ...
    def glClearBufferData(self, target: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float, /) -> None: ...
    def glClearDepth(self, depth: float, /) -> None: ...
    def glClearDepthf(self, dd: float, /) -> None: ...
    def glClearNamedBufferData(self, buffer: int, internalformat: int, format: int, type: int, data: int, /) -> None: ...
    def glClearNamedFramebufferfi(self, framebuffer: int, buffer: int, depth: float, stencil: int, /) -> None: ...
    def glClearNamedFramebufferfv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glClearNamedFramebufferiv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearNamedFramebufferuiv(self, framebuffer: int, buffer: int, drawbuffer: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glClearStencil(self, s: int, /) -> None: ...
    def glClearTexImage(self, texture: int, level: int, format: int, type: int, data: int, /) -> None: ...
    def glClearTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, data: int, /) -> None: ...
    def glClipControl(self, origin: int, depth: int, /) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int, /) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int, /) -> None: ...
    def glCompileShader(self, shader: int, /) -> None: ...
    def glCompressedTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage1D(self, texture: int, level: int, xoffset: int, width: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCompressedTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int, /) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int, /) -> None: ...
    def glCopyTexImage1D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, border: int, /) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int, /) -> None: ...
    def glCopyTexSubImage1D(self, target: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTextureSubImage1D(self, texture: int, level: int, xoffset: int, x: int, y: int, width: int, /) -> None: ...
    def glCopyTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCopyTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int, /) -> None: ...
    def glCreateProgram(self, /) -> int: ...
    def glCreateShader(self, type: int, /) -> int: ...
    def glCullFace(self, mode: int, /) -> None: ...
    def glDebugMessageControl(self, source: int, type: int, severity: int, count: int, ids: collections.abc.Sequence[int], enabled: int, /) -> None: ...
    def glDebugMessageInsert(self, source: int, type: int, id: int, severity: int, length: int, buf: bytes | bytearray | memoryview, /) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteProgram(self, program: int, /) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteQueries(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteShader(self, shader: int, /) -> None: ...
    def glDeleteTextures(self, n: int, textures: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: collections.abc.Sequence[int], /) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: collections.abc.Sequence[int], /) -> None: ...
    def glDepthFunc(self, func: int, /) -> None: ...
    def glDepthMask(self, flag: int, /) -> None: ...
    def glDepthRange(self, nearVal: float, farVal: float, /) -> None: ...
    def glDepthRangeArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glDepthRangeIndexed(self, index: int, n: float, f: float, /) -> None: ...
    def glDepthRangef(self, n: float, f: float, /) -> None: ...
    def glDetachShader(self, program: int, shader: int, /) -> None: ...
    def glDisable(self, cap: int, /) -> None: ...
    def glDisableVertexArrayAttrib(self, vaobj: int, index: int, /) -> None: ...
    def glDisableVertexAttribArray(self, index: int, /) -> None: ...
    def glDisablei(self, target: int, index: int, /) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int, /) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int, /) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int, /) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int, /) -> None: ...
    def glDrawArraysInstancedBaseInstance(self, mode: int, first: int, count: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawBuffer(self, buf: int, /) -> None: ...
    def glDrawBuffers(self, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int, /) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int, /) -> None: ...
    def glDrawElementsInstancedBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, baseinstance: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, /) -> None: ...
    def glDrawElementsInstancedBaseVertexBaseInstance(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int, baseinstance: int, /) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int, /) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int, /) -> None: ...
    def glDrawTransformFeedback(self, mode: int, id: int, /) -> None: ...
    def glDrawTransformFeedbackInstanced(self, mode: int, id: int, instancecount: int, /) -> None: ...
    def glDrawTransformFeedbackStream(self, mode: int, id: int, stream: int, /) -> None: ...
    def glDrawTransformFeedbackStreamInstanced(self, mode: int, id: int, stream: int, instancecount: int, /) -> None: ...
    def glEnable(self, cap: int, /) -> None: ...
    def glEnableVertexArrayAttrib(self, vaobj: int, index: int, /) -> None: ...
    def glEnableVertexAttribArray(self, index: int, /) -> None: ...
    def glEnablei(self, target: int, index: int, /) -> None: ...
    def glEndConditionalRender(self, /) -> None: ...
    def glEndQuery(self, target: int, /) -> None: ...
    def glEndQueryIndexed(self, target: int, index: int, /) -> None: ...
    def glEndTransformFeedback(self, /) -> None: ...
    def glFinish(self, /) -> None: ...
    def glFlush(self, /) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture1D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int, /) -> None: ...
    def glFramebufferTexture3D(self, target: int, attachment: int, textarget: int, texture: int, level: int, zoffset: int, /) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glFrontFace(self, mode: int, /) -> None: ...
    def glGenerateMipmap(self, target: int, /) -> None: ...
    def glGenerateTextureMipmap(self, texture: int, /) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetBooleani_v(self, target: int, index: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetBooleanv(self, pname: int, /) -> typing.Union[bool, typing.List[typing.Any]]: ...
    def glGetCompressedTexImage(self, target: int, level: int, img: int, /) -> None: ...
    def glGetCompressedTextureImage(self, texture: int, level: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetCompressedTextureSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetDoublei_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetDoublev(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetError(self, /) -> int: ...
    def glGetFloati_v(self, target: int, index: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFloatv(self, pname: int, /) -> typing.Union[float, typing.List[typing.Any]]: ...
    def glGetFragDataIndex(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetGraphicsResetStatus(self, /) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetIntegerv(self, pname: int, /) -> typing.Union[int, typing.List[typing.Any]]: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetProgramResourceLocationIndex(self, program: int, programInterface: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetString(self, name: int, /) -> str: ...
    def glGetStringi(self, name: int, index: int, /) -> str: ...
    def glGetSubroutineIndex(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetSubroutineUniformLocation(self, program: int, shadertype: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetTexImage(self, target: int, level: int, format: int, type: int, pixels: int, /) -> None: ...
    def glGetTextureImage(self, texture: int, level: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetTextureSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes | bytearray | memoryview, /) -> int: ...
    def glGetUniformLocation(self, program: int, name: bytes | bytearray | memoryview, /) -> int: ...
    def glGetnCompressedTexImage(self, target: int, lod: int, bufSize: int, pixels: int, /) -> None: ...
    def glGetnTexImage(self, target: int, level: int, format: int, type: int, bufSize: int, pixels: int, /) -> None: ...
    def glHint(self, target: int, mode: int, /) -> None: ...
    def glInvalidateBufferData(self, buffer: int, /) -> None: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateNamedFramebufferData(self, framebuffer: int, numAttachments: int, attachments: collections.abc.Sequence[int], /) -> None: ...
    def glInvalidateNamedFramebufferSubData(self, framebuffer: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: collections.abc.Sequence[int], x: int, y: int, width: int, height: int, /) -> None: ...
    def glInvalidateTexImage(self, texture: int, level: int, /) -> None: ...
    def glInvalidateTexSubImage(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, /) -> None: ...
    def glIsBuffer(self, buffer: int, /) -> int: ...
    def glIsEnabled(self, cap: int, /) -> int: ...
    def glIsEnabledi(self, target: int, index: int, /) -> int: ...
    def glIsFramebuffer(self, framebuffer: int, /) -> int: ...
    def glIsProgram(self, program: int, /) -> int: ...
    def glIsProgramPipeline(self, pipeline: int, /) -> int: ...
    def glIsQuery(self, id: int, /) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int, /) -> int: ...
    def glIsSampler(self, sampler: int, /) -> int: ...
    def glIsShader(self, shader: int, /) -> int: ...
    def glIsTexture(self, texture: int, /) -> int: ...
    def glIsTransformFeedback(self, id: int, /) -> int: ...
    def glIsVertexArray(self, array: int, /) -> int: ...
    def glLineWidth(self, width: float, /) -> None: ...
    def glLinkProgram(self, program: int, /) -> None: ...
    def glLogicOp(self, opcode: int, /) -> None: ...
    def glMapBuffer(self, target: int, access: int, /) -> int: ...
    def glMapNamedBuffer(self, buffer: int, access: int, /) -> int: ...
    def glMemoryBarrier(self, barriers: int, /) -> None: ...
    def glMemoryBarrierByRegion(self, barriers: int, /) -> None: ...
    def glMinSampleShading(self, value: float, /) -> None: ...
    def glMultiDrawArrays(self, mode: int, first: collections.abc.Sequence[int], count: collections.abc.Sequence[int], drawcount: int, /) -> None: ...
    def glMultiDrawArraysIndirect(self, mode: int, indirect: int, drawcount: int, stride: int, /) -> None: ...
    def glNamedFramebufferDrawBuffer(self, framebuffer: int, buf: int, /) -> None: ...
    def glNamedFramebufferDrawBuffers(self, framebuffer: int, n: int, bufs: collections.abc.Sequence[int], /) -> None: ...
    def glNamedFramebufferParameteri(self, framebuffer: int, pname: int, param: int, /) -> None: ...
    def glNamedFramebufferReadBuffer(self, framebuffer: int, src: int, /) -> None: ...
    def glNamedFramebufferRenderbuffer(self, framebuffer: int, attachment: int, renderbuffertarget: int, renderbuffer: int, /) -> None: ...
    def glNamedFramebufferTexture(self, framebuffer: int, attachment: int, texture: int, level: int, /) -> None: ...
    def glNamedFramebufferTextureLayer(self, framebuffer: int, attachment: int, texture: int, level: int, layer: int, /) -> None: ...
    def glNamedRenderbufferStorage(self, renderbuffer: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glNamedRenderbufferStorageMultisample(self, renderbuffer: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glObjectLabel(self, identifier: int, name: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glObjectPtrLabel(self, ptr: int, length: int, label: bytes | bytearray | memoryview, /) -> None: ...
    def glPatchParameterfv(self, pname: int, values: collections.abc.Sequence[float], /) -> None: ...
    def glPatchParameteri(self, pname: int, value: int, /) -> None: ...
    def glPauseTransformFeedback(self, /) -> None: ...
    def glPixelStoref(self, pname: int, param: float, /) -> None: ...
    def glPixelStorei(self, pname: int, param: int, /) -> None: ...
    def glPointParameterf(self, pname: int, param: float, /) -> None: ...
    def glPointParameterfv(self, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glPointParameteri(self, pname: int, param: int, /) -> None: ...
    def glPointParameteriv(self, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glPointSize(self, size: float, /) -> None: ...
    def glPolygonMode(self, face: int, mode: int, /) -> None: ...
    def glPolygonOffset(self, factor: float, units: float, /) -> None: ...
    def glPopDebugGroup(self, /) -> None: ...
    def glPrimitiveRestartIndex(self, index: int, /) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int, /) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int, /) -> None: ...
    def glProgramUniform1d(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float, /) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int, /) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2d(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float, /) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int, /) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3d(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4d(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4dv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glProgramUniformMatrix2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3dv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glProvokingVertex(self, mode: int, /) -> None: ...
    def glPushDebugGroup(self, source: int, id: int, length: int, message: bytes | bytearray | memoryview, /) -> None: ...
    def glQueryCounter(self, id: int, target: int, /) -> None: ...
    def glReadBuffer(self, src: int, /) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glReadnPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, bufSize: int, data: int, /) -> None: ...
    def glReleaseShaderCompiler(self, /) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glResumeTransformFeedback(self, /) -> None: ...
    def glSampleCoverage(self, value: float, invert: int, /) -> None: ...
    def glSampleMaski(self, maskNumber: int, mask: int, /) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float, /) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int, /) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glScissorArrayv(self, first: int, count: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glScissorIndexed(self, index: int, left: int, bottom: int, width: int, height: int, /) -> None: ...
    def glScissorIndexedv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glShaderBinary(self, count: int, shaders: collections.abc.Sequence[int], binaryformat: int, binary: int, length: int, /) -> None: ...
    def glShaderStorageBlockBinding(self, program: int, storageBlockIndex: int, storageBlockBinding: int, /) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int, /) -> None: ...
    def glStencilMask(self, mask: int, /) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int, /) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int, /) -> None: ...
    def glStencilOpSeparate(self, face: int, sfail: int, dpfail: int, dppass: int, /) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int, /) -> None: ...
    def glTexImage1D(self, target: int, level: int, internalformat: int, width: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexImage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float, /) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: collections.abc.Sequence[float], /) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int, /) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTexStorage1D(self, target: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTexSubImage1D(self, target: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureBarrier(self, /) -> None: ...
    def glTextureBuffer(self, texture: int, internalformat: int, buffer: int, /) -> None: ...
    def glTextureParameterIiv(self, texture: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTextureParameterIuiv(self, texture: int, pname: int, params: collections.abc.Sequence[int], /) -> None: ...
    def glTextureParameterf(self, texture: int, pname: int, param: float, /) -> None: ...
    def glTextureParameterfv(self, texture: int, pname: int, param: collections.abc.Sequence[float], /) -> None: ...
    def glTextureParameteri(self, texture: int, pname: int, param: int, /) -> None: ...
    def glTextureParameteriv(self, texture: int, pname: int, param: collections.abc.Sequence[int], /) -> None: ...
    def glTextureStorage1D(self, texture: int, levels: int, internalformat: int, width: int, /) -> None: ...
    def glTextureStorage2D(self, texture: int, levels: int, internalformat: int, width: int, height: int, /) -> None: ...
    def glTextureStorage2DMultisample(self, texture: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int, /) -> None: ...
    def glTextureStorage3D(self, texture: int, levels: int, internalformat: int, width: int, height: int, depth: int, /) -> None: ...
    def glTextureStorage3DMultisample(self, texture: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int, /) -> None: ...
    def glTextureSubImage1D(self, texture: int, level: int, xoffset: int, width: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureSubImage2D(self, texture: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureSubImage3D(self, texture: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int, /) -> None: ...
    def glTextureView(self, texture: int, target: int, origtexture: int, internalformat: int, minlevel: int, numlevels: int, minlayer: int, numlayers: int, /) -> None: ...
    def glTransformFeedbackBufferBase(self, xfb: int, index: int, buffer: int, /) -> None: ...
    def glUniform1d(self, location: int, x: float, /) -> None: ...
    def glUniform1dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1f(self, location: int, v0: float, /) -> None: ...
    def glUniform1fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform1i(self, location: int, v0: int, /) -> None: ...
    def glUniform1iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform1ui(self, location: int, v0: int, /) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2d(self, location: int, x: float, y: float, /) -> None: ...
    def glUniform2dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2f(self, location: int, v0: float, v1: float, /) -> None: ...
    def glUniform2fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform2i(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int, /) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3d(self, location: int, x: float, y: float, z: float, /) -> None: ...
    def glUniform3dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3f(self, location: int, v0: float, v1: float, v2: float, /) -> None: ...
    def glUniform3fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform3i(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int, /) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4d(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glUniform4dv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4f(self, location: int, v0: float, v1: float, v2: float, v3: float, /) -> None: ...
    def glUniform4fv(self, location: int, count: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniform4i(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4iv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int, /) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int, /) -> None: ...
    def glUniformMatrix2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3dv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: collections.abc.Sequence[float], /) -> None: ...
    def glUniformSubroutinesuiv(self, shadertype: int, count: int, indices: collections.abc.Sequence[int], /) -> None: ...
    def glUnmapBuffer(self, target: int, /) -> int: ...
    def glUnmapNamedBuffer(self, buffer: int, /) -> int: ...
    def glUseProgram(self, program: int, /) -> None: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int, /) -> None: ...
    def glValidateProgram(self, program: int, /) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int, /) -> None: ...
    def glVertexArrayAttribBinding(self, vaobj: int, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexArrayAttribFormat(self, vaobj: int, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayAttribIFormat(self, vaobj: int, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayAttribLFormat(self, vaobj: int, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexArrayBindingDivisor(self, vaobj: int, bindingindex: int, divisor: int, /) -> None: ...
    def glVertexArrayElementBuffer(self, vaobj: int, buffer: int, /) -> None: ...
    def glVertexArrayVertexBuffers(self, vaobj: int, first: int, count: int, buffers: collections.abc.Sequence[int], offsets: collections.abc.Sequence[int], strides: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1f(self, index: int, x: float, /) -> None: ...
    def glVertexAttrib1fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib1s(self, index: int, x: int, /) -> None: ...
    def glVertexAttrib1sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2f(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttrib2fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib2s(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttrib2sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3f(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttrib3fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib3s(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttrib3sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nbv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Niv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nsv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nub(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4Nubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4Nuiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4Nusv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4f(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttrib4fv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttrib4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4s(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttrib4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttrib4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttrib4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int, /) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int, /) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribI1i(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI1ui(self, index: int, x: int, /) -> None: ...
    def glVertexAttribI1uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2i(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI2ui(self, index: int, x: int, y: int, /) -> None: ...
    def glVertexAttribI2uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3i(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI3ui(self, index: int, x: int, y: int, z: int, /) -> None: ...
    def glVertexAttribI3uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4bv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4sv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4ubv(self, index: int, v: bytes | bytearray | memoryview, /) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int, /) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribI4usv(self, index: int, v: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribL1d(self, index: int, x: float, /) -> None: ...
    def glVertexAttribL1dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL2d(self, index: int, x: float, y: float, /) -> None: ...
    def glVertexAttribL2dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL3d(self, index: int, x: float, y: float, z: float, /) -> None: ...
    def glVertexAttribL3dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribL4d(self, index: int, x: float, y: float, z: float, w: float, /) -> None: ...
    def glVertexAttribL4dv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glVertexAttribLFormat(self, attribindex: int, size: int, type: int, relativeoffset: int, /) -> None: ...
    def glVertexAttribLPointer(self, index: int, size: int, type: int, stride: int, pointer: int, /) -> None: ...
    def glVertexAttribP1ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP1uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP2ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP2uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP3ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP3uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribP4ui(self, index: int, type: int, normalized: int, value: int, /) -> None: ...
    def glVertexAttribP4uiv(self, index: int, type: int, normalized: int, value: collections.abc.Sequence[int], /) -> None: ...
    def glVertexAttribPointer(self, index: int, size: int, type: int, normalized: int, stride: int, pointer: int, /) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int, /) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int, /) -> None: ...
    def glViewportArrayv(self, first: int, count: int, v: collections.abc.Sequence[float], /) -> None: ...
    def glViewportIndexedf(self, index: int, x: float, y: float, w: float, h: float, /) -> None: ...
    def glViewportIndexedfv(self, index: int, v: collections.abc.Sequence[float], /) -> None: ...
    def initializeOpenGLFunctions(self, /) -> bool: ...


class QOpenGLPaintDevice(PySide6.QtGui.QPaintDevice):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, size: PySide6.QtCore.QSize, /) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, /) -> None: ...

    def context(self, /) -> PySide6.QtGui.QOpenGLContext: ...
    def devType(self, /) -> int: ...
    def dotsPerMeterX(self, /) -> float: ...
    def dotsPerMeterY(self, /) -> float: ...
    def ensureActiveTarget(self, /) -> None: ...
    def metric(self, metric: PySide6.QtGui.QPaintDevice.PaintDeviceMetric, /) -> int: ...
    def paintEngine(self, /) -> PySide6.QtGui.QPaintEngine: ...
    def paintFlipped(self, /) -> bool: ...
    def setDevicePixelRatio(self, devicePixelRatio: float, /) -> None: ...
    def setDotsPerMeterX(self, arg__1: float, /) -> None: ...
    def setDotsPerMeterY(self, arg__1: float, /) -> None: ...
    def setPaintFlipped(self, flipped: bool, /) -> None: ...
    def setSize(self, size: PySide6.QtCore.QSize, /) -> None: ...
    def size(self, /) -> PySide6.QtCore.QSize: ...


class QOpenGLPixelTransferOptions(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, arg__1: PySide6.QtOpenGL.QOpenGLPixelTransferOptions, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def alignment(self, /) -> int: ...
    def imageHeight(self, /) -> int: ...
    def isLeastSignificantBitFirst(self, /) -> bool: ...
    def isSwapBytesEnabled(self, /) -> bool: ...
    def rowLength(self, /) -> int: ...
    def setAlignment(self, alignment: int, /) -> None: ...
    def setImageHeight(self, imageHeight: int, /) -> None: ...
    def setLeastSignificantByteFirst(self, lsbFirst: bool, /) -> None: ...
    def setRowLength(self, rowLength: int, /) -> None: ...
    def setSkipImages(self, skipImages: int, /) -> None: ...
    def setSkipPixels(self, skipPixels: int, /) -> None: ...
    def setSkipRows(self, skipRows: int, /) -> None: ...
    def setSwapBytesEnabled(self, swapBytes: bool, /) -> None: ...
    def skipImages(self, /) -> int: ...
    def skipPixels(self, /) -> int: ...
    def skipRows(self, /) -> int: ...
    def swap(self, other: PySide6.QtOpenGL.QOpenGLPixelTransferOptions, /) -> None: ...


class QOpenGLShader(PySide6.QtCore.QObject):

    class ShaderTypeBit(enum.Flag):

        Vertex                    = ...  # 0x1
        Fragment                  = ...  # 0x2
        Geometry                  = ...  # 0x4
        TessellationControl       = ...  # 0x8
        TessellationEvaluation    = ...  # 0x10
        Compute                   = ...  # 0x20


    def __init__(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def compileSourceCode(self, source: str, /) -> bool: ...
    @typing.overload
    def compileSourceCode(self, source: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def compileSourceCode(self, source: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    def compileSourceFile(self, fileName: str, /) -> bool: ...
    @staticmethod
    def hasOpenGLShaders(type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, /, context: PySide6.QtGui.QOpenGLContext | None = ...) -> bool: ...
    def isCompiled(self, /) -> bool: ...
    def log(self, /) -> str: ...
    def shaderId(self, /) -> int: ...
    def shaderType(self, /) -> PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit: ...
    def sourceCode(self, /) -> PySide6.QtCore.QByteArray: ...


class QOpenGLShaderProgram(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    @typing.overload
    def addCacheableShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: str, /) -> bool: ...
    @typing.overload
    def addCacheableShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def addCacheableShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    def addCacheableShaderFromSourceFile(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, fileName: str, /) -> bool: ...
    def addShader(self, shader: PySide6.QtOpenGL.QOpenGLShader, /) -> bool: ...
    @typing.overload
    def addShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: str, /) -> bool: ...
    @typing.overload
    def addShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: bytes | bytearray | memoryview, /) -> bool: ...
    @typing.overload
    def addShaderFromSourceCode(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, source: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> bool: ...
    def addShaderFromSourceFile(self, type: PySide6.QtOpenGL.QOpenGLShader.ShaderTypeBit, fileName: str, /) -> bool: ...
    @typing.overload
    def attributeLocation(self, name: str, /) -> int: ...
    @typing.overload
    def attributeLocation(self, name: bytes | bytearray | memoryview, /) -> int: ...
    @typing.overload
    def attributeLocation(self, name: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> int: ...
    def bind(self, /) -> bool: ...
    @typing.overload
    def bindAttributeLocation(self, name: str, location: int, /) -> None: ...
    @typing.overload
    def bindAttributeLocation(self, name: bytes | bytearray | memoryview, location: int, /) -> None: ...
    @typing.overload
    def bindAttributeLocation(self, name: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, location: int, /) -> None: ...
    def create(self, /) -> bool: ...
    def defaultInnerTessellationLevels(self, /) -> typing.List[float]: ...
    def defaultOuterTessellationLevels(self, /) -> typing.List[float]: ...
    @typing.overload
    def disableAttributeArray(self, name: bytes | bytearray | memoryview, /) -> None: ...
    @typing.overload
    def disableAttributeArray(self, location: int, /) -> None: ...
    @typing.overload
    def enableAttributeArray(self, name: bytes | bytearray | memoryview, /) -> None: ...
    @typing.overload
    def enableAttributeArray(self, location: int, /) -> None: ...
    @staticmethod
    def hasOpenGLShaderPrograms(context: PySide6.QtGui.QOpenGLContext | None = ...) -> bool: ...
    def isLinked(self, /) -> bool: ...
    def link(self, /) -> bool: ...
    def log(self, /) -> str: ...
    def maxGeometryOutputVertices(self, /) -> int: ...
    def patchVertexCount(self, /) -> int: ...
    def programId(self, /) -> int: ...
    def release(self, /) -> None: ...
    def removeAllShaders(self, /) -> None: ...
    def removeShader(self, shader: PySide6.QtOpenGL.QOpenGLShader, /) -> None: ...
    @typing.overload
    def setAttributeArray(self, name: bytes | bytearray | memoryview, values: collections.abc.Sequence[float], tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeArray(self, name: bytes | bytearray | memoryview, type: int, values: int, tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeArray(self, location: int, values: collections.abc.Sequence[float], tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeArray(self, location: int, type: int, values: int, tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeBuffer(self, name: bytes | bytearray | memoryview, type: int, offset: int, tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeBuffer(self, location: int, type: int, offset: int, tupleSize: int, /, stride: int | None = ...) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector2D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector4D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, values: collections.abc.Sequence[float], columns: int, rows: int, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, value: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, x: float, y: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, x: float, y: float, z: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, x: float, y: float, z: float, w: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, name: bytes | bytearray | memoryview, value: typing.Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, typing.Any, PySide6.QtCore.Qt.GlobalColor, int], /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, value: PySide6.QtGui.QVector2D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, value: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, value: PySide6.QtGui.QVector4D, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, values: collections.abc.Sequence[float], columns: int, rows: int, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, value: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, x: float, y: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, x: float, y: float, z: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    @typing.overload
    def setAttributeValue(self, location: int, value: typing.Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, typing.Any, PySide6.QtCore.Qt.GlobalColor, int], /) -> None: ...
    def setDefaultInnerTessellationLevels(self, levels: collections.abc.Sequence[float], /) -> None: ...
    def setDefaultOuterTessellationLevels(self, levels: collections.abc.Sequence[float], /) -> None: ...
    def setPatchVertexCount(self, count: int, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix2x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix2x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix2x4, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix3x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix3x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix3x4, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix4x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix4x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, point: PySide6.QtCore.QPoint, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, size: PySide6.QtCore.QSize, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QTransform, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector2D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QVector4D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, size: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: typing.Tuple[typing.Tuple[float, float], typing.Tuple[float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, value: typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, x: float, y: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, x: float, y: float, z: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, x: float, y: float, z: float, w: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, name: bytes | bytearray | memoryview, color: typing.Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, typing.Any, PySide6.QtCore.Qt.GlobalColor, int], /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix2x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix2x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix2x4, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix3x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix3x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix3x4, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix4x2, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix4x3, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, point: PySide6.QtCore.QPoint, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, size: PySide6.QtCore.QSize, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QTransform, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QVector2D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QVector3D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QVector4D, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, size: PySide6.QtCore.QSizeF | PySide6.QtCore.QSize, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, point: PySide6.QtCore.QPointF | PySide6.QtCore.QPoint | PySide6.QtGui.QPainterPath.Element, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float, float], typing.Tuple[float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: int, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, value: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, x: float, y: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, x: float, y: float, z: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, x: float, y: float, z: float, w: float, /) -> None: ...
    @typing.overload
    def setUniformValue(self, location: int, color: typing.Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, typing.Any, PySide6.QtCore.Qt.GlobalColor, int], /) -> None: ...
    @typing.overload
    def setUniformValue1f(self, arg__1: bytes | bytearray | memoryview, arg__2: float, /) -> None: ...
    @typing.overload
    def setUniformValue1f(self, arg__1: int, arg__2: float, /) -> None: ...
    @typing.overload
    def setUniformValue1i(self, arg__1: bytes | bytearray | memoryview, arg__2: int, /) -> None: ...
    @typing.overload
    def setUniformValue1i(self, arg__1: int, arg__2: int, /) -> None: ...
    @typing.overload
    def setUniformValueArray(self, name: bytes | bytearray | memoryview, values: collections.abc.Sequence[int], count: int, /) -> None: ...
    @typing.overload
    def setUniformValueArray(self, name: bytes | bytearray | memoryview, values: collections.abc.Sequence[float], count: int, tupleSize: int, /) -> None: ...
    @typing.overload
    def setUniformValueArray(self, location: int, values: collections.abc.Sequence[int], count: int, /) -> None: ...
    @typing.overload
    def setUniformValueArray(self, location: int, values: collections.abc.Sequence[float], count: int, tupleSize: int, /) -> None: ...
    def shaders(self, /) -> typing.List[PySide6.QtOpenGL.QOpenGLShader]: ...
    @typing.overload
    def uniformLocation(self, name: str, /) -> int: ...
    @typing.overload
    def uniformLocation(self, name: bytes | bytearray | memoryview, /) -> int: ...
    @typing.overload
    def uniformLocation(self, name: PySide6.QtCore.QByteArray | bytes | bytearray | memoryview, /) -> int: ...


class QOpenGLTexture(Shiboken.Object):

    class BindingTarget(enum.Enum):

        BindingTarget1D           = ...  # 0x8068
        BindingTarget2D           = ...  # 0x8069
        BindingTarget3D           = ...  # 0x806a
        BindingTargetRectangle    = ...  # 0x84f6
        BindingTargetCubeMap      = ...  # 0x8514
        BindingTarget1DArray      = ...  # 0x8c1c
        BindingTarget2DArray      = ...  # 0x8c1d
        BindingTargetBuffer       = ...  # 0x8c2c
        BindingTargetCubeMapArray = ...  # 0x900a
        BindingTarget2DMultisample = ...  # 0x9104
        BindingTarget2DMultisampleArray = ...  # 0x9105

    class ComparisonFunction(enum.Enum):

        CompareNever              = ...  # 0x200
        CompareLess               = ...  # 0x201
        CompareEqual              = ...  # 0x202
        CompareLessEqual          = ...  # 0x203
        CompareGreater            = ...  # 0x204
        CommpareNotEqual          = ...  # 0x205
        CompareNotEqual           = ...  # 0x205
        CompareGreaterEqual       = ...  # 0x206
        CompareAlways             = ...  # 0x207

    class ComparisonMode(enum.Enum):

        CompareNone               = ...  # 0x0
        CompareRefToTexture       = ...  # 0x884e

    class CoordinateDirection(enum.Enum):

        DirectionS                = ...  # 0x2802
        DirectionT                = ...  # 0x2803
        DirectionR                = ...  # 0x8072

    class CubeMapFace(enum.Enum):

        CubeMapPositiveX          = ...  # 0x8515
        CubeMapNegativeX          = ...  # 0x8516
        CubeMapPositiveY          = ...  # 0x8517
        CubeMapNegativeY          = ...  # 0x8518
        CubeMapPositiveZ          = ...  # 0x8519
        CubeMapNegativeZ          = ...  # 0x851a

    class DepthStencilMode(enum.Enum):

        StencilMode               = ...  # 0x1901
        DepthMode                 = ...  # 0x1902

    class Feature(enum.Flag):

        ImmutableStorage          = ...  # 0x1
        ImmutableMultisampleStorage = ...  # 0x2
        TextureRectangle          = ...  # 0x4
        TextureArrays             = ...  # 0x8
        Texture3D                 = ...  # 0x10
        TextureMultisample        = ...  # 0x20
        TextureBuffer             = ...  # 0x40
        TextureCubeMapArrays      = ...  # 0x80
        Swizzle                   = ...  # 0x100
        StencilTexturing          = ...  # 0x200
        AnisotropicFiltering      = ...  # 0x400
        NPOTTextures              = ...  # 0x800
        NPOTTextureRepeat         = ...  # 0x1000
        Texture1D                 = ...  # 0x2000
        TextureComparisonOperators = ...  # 0x4000
        TextureMipMapLevel        = ...  # 0x8000
        MaxFeatureFlag            = ...  # 0x10000

    class Filter(enum.Enum):

        Nearest                   = ...  # 0x2600
        Linear                    = ...  # 0x2601
        NearestMipMapNearest      = ...  # 0x2700
        LinearMipMapNearest       = ...  # 0x2701
        NearestMipMapLinear       = ...  # 0x2702
        LinearMipMapLinear        = ...  # 0x2703

    class MipMapGeneration(enum.Enum):

        GenerateMipMaps           = ...  # 0x0
        DontGenerateMipMaps       = ...  # 0x1

    class PixelFormat(enum.Enum):

        NoSourceFormat            = ...  # 0x0
        Stencil                   = ...  # 0x1901
        Depth                     = ...  # 0x1902
        Red                       = ...  # 0x1903
        Alpha                     = ...  # 0x1906
        RGB                       = ...  # 0x1907
        RGBA                      = ...  # 0x1908
        Luminance                 = ...  # 0x1909
        LuminanceAlpha            = ...  # 0x190a
        BGR                       = ...  # 0x80e0
        BGRA                      = ...  # 0x80e1
        RG                        = ...  # 0x8227
        RG_Integer                = ...  # 0x8228
        DepthStencil              = ...  # 0x84f9
        Red_Integer               = ...  # 0x8d94
        RGB_Integer               = ...  # 0x8d98
        RGBA_Integer              = ...  # 0x8d99
        BGR_Integer               = ...  # 0x8d9a
        BGRA_Integer              = ...  # 0x8d9b

    class PixelType(enum.Enum):

        NoPixelType               = ...  # 0x0
        Int8                      = ...  # 0x1400
        UInt8                     = ...  # 0x1401
        Int16                     = ...  # 0x1402
        UInt16                    = ...  # 0x1403
        Int32                     = ...  # 0x1404
        UInt32                    = ...  # 0x1405
        Float32                   = ...  # 0x1406
        Float16                   = ...  # 0x140b
        UInt8_RG3B2               = ...  # 0x8032
        UInt16_RGBA4              = ...  # 0x8033
        UInt16_RGB5A1             = ...  # 0x8034
        UInt32_RGBA8              = ...  # 0x8035
        UInt32_RGB10A2            = ...  # 0x8036
        UInt8_RG3B2_Rev           = ...  # 0x8362
        UInt16_R5G6B5             = ...  # 0x8363
        UInt16_R5G6B5_Rev         = ...  # 0x8364
        UInt16_RGBA4_Rev          = ...  # 0x8365
        UInt16_RGB5A1_Rev         = ...  # 0x8366
        UInt32_RGBA8_Rev          = ...  # 0x8367
        UInt32_RGB10A2_Rev        = ...  # 0x8368
        UInt32_D24S8              = ...  # 0x84fa
        UInt32_RG11B10F           = ...  # 0x8c3b
        UInt32_RGB9_E5            = ...  # 0x8c3e
        Float16OES                = ...  # 0x8d61
        Float32_D32_UInt32_S8_X24 = ...  # 0x8dad

    class SwizzleComponent(enum.Enum):

        SwizzleRed                = ...  # 0x8e42
        SwizzleGreen              = ...  # 0x8e43
        SwizzleBlue               = ...  # 0x8e44
        SwizzleAlpha              = ...  # 0x8e45

    class SwizzleValue(enum.Enum):

        ZeroValue                 = ...  # 0x0
        OneValue                  = ...  # 0x1
        RedValue                  = ...  # 0x1903
        GreenValue                = ...  # 0x1904
        BlueValue                 = ...  # 0x1905
        AlphaValue                = ...  # 0x1906

    class Target(enum.Enum):

        Target1D                  = ...  # 0xde0
        Target2D                  = ...  # 0xde1
        Target3D                  = ...  # 0x806f
        TargetRectangle           = ...  # 0x84f5
        TargetCubeMap             = ...  # 0x8513
        Target1DArray             = ...  # 0x8c18
        Target2DArray             = ...  # 0x8c1a
        TargetBuffer              = ...  # 0x8c2a
        TargetCubeMapArray        = ...  # 0x9009
        Target2DMultisample       = ...  # 0x9100
        Target2DMultisampleArray  = ...  # 0x9102

    class TextureFormat(enum.Enum):

        NoFormat                  = ...  # 0x0
        DepthFormat               = ...  # 0x1902
        AlphaFormat               = ...  # 0x1906
        RGBFormat                 = ...  # 0x1907
        RGBAFormat                = ...  # 0x1908
        LuminanceFormat           = ...  # 0x1909
        LuminanceAlphaFormat      = ...  # 0x190a
        RG3B2                     = ...  # 0x2a10
        RGB8_UNorm                = ...  # 0x8051
        RGB16_UNorm               = ...  # 0x8054
        RGBA4                     = ...  # 0x8056
        RGB5A1                    = ...  # 0x8057
        RGBA8_UNorm               = ...  # 0x8058
        RGBA16_UNorm              = ...  # 0x805b
        D16                       = ...  # 0x81a5
        D24                       = ...  # 0x81a6
        D32                       = ...  # 0x81a7
        R8_UNorm                  = ...  # 0x8229
        R16_UNorm                 = ...  # 0x822a
        RG8_UNorm                 = ...  # 0x822b
        RG16_UNorm                = ...  # 0x822c
        R16F                      = ...  # 0x822d
        R32F                      = ...  # 0x822e
        RG16F                     = ...  # 0x822f
        RG32F                     = ...  # 0x8230
        R8I                       = ...  # 0x8231
        R8U                       = ...  # 0x8232
        R16I                      = ...  # 0x8233
        R16U                      = ...  # 0x8234
        R32I                      = ...  # 0x8235
        R32U                      = ...  # 0x8236
        RG8I                      = ...  # 0x8237
        RG8U                      = ...  # 0x8238
        RG16I                     = ...  # 0x8239
        RG16U                     = ...  # 0x823a
        RG32I                     = ...  # 0x823b
        RG32U                     = ...  # 0x823c
        RGB_DXT1                  = ...  # 0x83f0
        RGBA_DXT1                 = ...  # 0x83f1
        RGBA_DXT3                 = ...  # 0x83f2
        RGBA_DXT5                 = ...  # 0x83f3
        RGBA32F                   = ...  # 0x8814
        RGB32F                    = ...  # 0x8815
        RGBA16F                   = ...  # 0x881a
        RGB16F                    = ...  # 0x881b
        D24S8                     = ...  # 0x88f0
        RG11B10F                  = ...  # 0x8c3a
        RGB9E5                    = ...  # 0x8c3d
        SRGB8                     = ...  # 0x8c41
        SRGB8_Alpha8              = ...  # 0x8c43
        SRGB_DXT1                 = ...  # 0x8c4c
        SRGB_Alpha_DXT1           = ...  # 0x8c4d
        SRGB_Alpha_DXT3           = ...  # 0x8c4e
        SRGB_Alpha_DXT5           = ...  # 0x8c4f
        D32F                      = ...  # 0x8cac
        D32FS8X24                 = ...  # 0x8cad
        S8                        = ...  # 0x8d48
        R5G6B5                    = ...  # 0x8d62
        RGB8_ETC1                 = ...  # 0x8d64
        RGBA32U                   = ...  # 0x8d70
        RGB32U                    = ...  # 0x8d71
        RGBA16U                   = ...  # 0x8d76
        RGB16U                    = ...  # 0x8d77
        RGBA8U                    = ...  # 0x8d7c
        RGB8U                     = ...  # 0x8d7d
        RGBA32I                   = ...  # 0x8d82
        RGB32I                    = ...  # 0x8d83
        RGBA16I                   = ...  # 0x8d88
        RGB16I                    = ...  # 0x8d89
        RGBA8I                    = ...  # 0x8d8e
        RGB8I                     = ...  # 0x8d8f
        R_ATI1N_UNorm             = ...  # 0x8dbb
        R_ATI1N_SNorm             = ...  # 0x8dbc
        RG_ATI2N_UNorm            = ...  # 0x8dbd
        RG_ATI2N_SNorm            = ...  # 0x8dbe
        RGB_BP_UNorm              = ...  # 0x8e8c
        SRGB_BP_UNorm             = ...  # 0x8e8d
        RGB_BP_SIGNED_FLOAT       = ...  # 0x8e8e
        RGB_BP_UNSIGNED_FLOAT     = ...  # 0x8e8f
        R8_SNorm                  = ...  # 0x8f94
        RG8_SNorm                 = ...  # 0x8f95
        RGB8_SNorm                = ...  # 0x8f96
        RGBA8_SNorm               = ...  # 0x8f97
        R16_SNorm                 = ...  # 0x8f98
        RG16_SNorm                = ...  # 0x8f99
        RGB16_SNorm               = ...  # 0x8f9a
        RGBA16_SNorm              = ...  # 0x8f9b
        RGB10A2                   = ...  # 0x906f
        R11_EAC_UNorm             = ...  # 0x9270
        R11_EAC_SNorm             = ...  # 0x9271
        RG11_EAC_UNorm            = ...  # 0x9272
        RG11_EAC_SNorm            = ...  # 0x9273
        RGB8_ETC2                 = ...  # 0x9274
        SRGB8_ETC2                = ...  # 0x9275
        RGB8_PunchThrough_Alpha1_ETC2 = ...  # 0x9276
        SRGB8_PunchThrough_Alpha1_ETC2 = ...  # 0x9277
        RGBA8_ETC2_EAC            = ...  # 0x9278
        SRGB8_Alpha8_ETC2_EAC     = ...  # 0x9279
        RGBA_ASTC_4x4             = ...  # 0x93b0
        RGBA_ASTC_5x4             = ...  # 0x93b1
        RGBA_ASTC_5x5             = ...  # 0x93b2
        RGBA_ASTC_6x5             = ...  # 0x93b3
        RGBA_ASTC_6x6             = ...  # 0x93b4
        RGBA_ASTC_8x5             = ...  # 0x93b5
        RGBA_ASTC_8x6             = ...  # 0x93b6
        RGBA_ASTC_8x8             = ...  # 0x93b7
        RGBA_ASTC_10x5            = ...  # 0x93b8
        RGBA_ASTC_10x6            = ...  # 0x93b9
        RGBA_ASTC_10x8            = ...  # 0x93ba
        RGBA_ASTC_10x10           = ...  # 0x93bb
        RGBA_ASTC_12x10           = ...  # 0x93bc
        RGBA_ASTC_12x12           = ...  # 0x93bd
        SRGB8_Alpha8_ASTC_4x4     = ...  # 0x93d0
        SRGB8_Alpha8_ASTC_5x4     = ...  # 0x93d1
        SRGB8_Alpha8_ASTC_5x5     = ...  # 0x93d2
        SRGB8_Alpha8_ASTC_6x5     = ...  # 0x93d3
        SRGB8_Alpha8_ASTC_6x6     = ...  # 0x93d4
        SRGB8_Alpha8_ASTC_8x5     = ...  # 0x93d5
        SRGB8_Alpha8_ASTC_8x6     = ...  # 0x93d6
        SRGB8_Alpha8_ASTC_8x8     = ...  # 0x93d7
        SRGB8_Alpha8_ASTC_10x5    = ...  # 0x93d8
        SRGB8_Alpha8_ASTC_10x6    = ...  # 0x93d9
        SRGB8_Alpha8_ASTC_10x8    = ...  # 0x93da
        SRGB8_Alpha8_ASTC_10x10   = ...  # 0x93db
        SRGB8_Alpha8_ASTC_12x10   = ...  # 0x93dc
        SRGB8_Alpha8_ASTC_12x12   = ...  # 0x93dd

    class TextureFormatClass(enum.Enum):

        NoFormatClass             = ...  # 0x0
        FormatClass_128Bit        = ...  # 0x1
        FormatClass_96Bit         = ...  # 0x2
        FormatClass_64Bit         = ...  # 0x3
        FormatClass_48Bit         = ...  # 0x4
        FormatClass_32Bit         = ...  # 0x5
        FormatClass_24Bit         = ...  # 0x6
        FormatClass_16Bit         = ...  # 0x7
        FormatClass_8Bit          = ...  # 0x8
        FormatClass_RGTC1_R       = ...  # 0x9
        FormatClass_RGTC2_RG      = ...  # 0xa
        FormatClass_BPTC_Unorm    = ...  # 0xb
        FormatClass_BPTC_Float    = ...  # 0xc
        FormatClass_S3TC_DXT1_RGB = ...  # 0xd
        FormatClass_S3TC_DXT1_RGBA = ...  # 0xe
        FormatClass_S3TC_DXT3_RGBA = ...  # 0xf
        FormatClass_S3TC_DXT5_RGBA = ...  # 0x10
        FormatClass_Unique        = ...  # 0x11

    class TextureUnitReset(enum.Enum):

        ResetTextureUnit          = ...  # 0x0
        DontResetTextureUnit      = ...  # 0x1

    class WrapMode(enum.Enum):

        Repeat                    = ...  # 0x2901
        ClampToBorder             = ...  # 0x812d
        ClampToEdge               = ...  # 0x812f
        MirroredRepeat            = ...  # 0x8370


    @typing.overload
    def __init__(self, image: PySide6.QtGui.QImage, /, genMipMaps: PySide6.QtOpenGL.QOpenGLTexture.MipMapGeneration = ...) -> None: ...
    @typing.overload
    def __init__(self, target: PySide6.QtOpenGL.QOpenGLTexture.Target, /) -> None: ...

    def __repr__(self, /) -> str: ...
    @typing.overload
    def allocateStorage(self, /) -> None: ...
    @typing.overload
    def allocateStorage(self, pixelFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, pixelType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, /) -> None: ...
    @typing.overload
    def bind(self, /) -> None: ...
    @typing.overload
    def bind(self, unit: int, /, reset: PySide6.QtOpenGL.QOpenGLTexture.TextureUnitReset = ...) -> None: ...
    def borderColor(self, /) -> PySide6.QtGui.QColor: ...
    @typing.overload
    @staticmethod
    def boundTextureId(target: PySide6.QtOpenGL.QOpenGLTexture.BindingTarget, /) -> int: ...
    @typing.overload
    @staticmethod
    def boundTextureId(unit: int, target: PySide6.QtOpenGL.QOpenGLTexture.BindingTarget, /) -> int: ...
    def comparisonFunction(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.ComparisonFunction: ...
    def comparisonMode(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.ComparisonMode: ...
    def create(self, /) -> bool: ...
    def createTextureView(self, target: PySide6.QtOpenGL.QOpenGLTexture.Target, viewFormat: PySide6.QtOpenGL.QOpenGLTexture.TextureFormat, minimumMipmapLevel: int, maximumMipmapLevel: int, minimumLayer: int, maximumLayer: int, /) -> PySide6.QtOpenGL.QOpenGLTexture: ...
    def depth(self, /) -> int: ...
    def depthStencilMode(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.DepthStencilMode: ...
    def destroy(self, /) -> None: ...
    def faces(self, /) -> int: ...
    def format(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.TextureFormat: ...
    @typing.overload
    def generateMipMaps(self, /) -> None: ...
    @typing.overload
    def generateMipMaps(self, baseLevel: int, /, resetBaseLevel: bool = ...) -> None: ...
    @staticmethod
    def hasFeature(feature: PySide6.QtOpenGL.QOpenGLTexture.Feature, /) -> bool: ...
    def height(self, /) -> int: ...
    def isAutoMipMapGenerationEnabled(self, /) -> bool: ...
    @typing.overload
    def isBound(self, /) -> bool: ...
    @typing.overload
    def isBound(self, unit: int, /) -> bool: ...
    def isCreated(self, /) -> bool: ...
    def isFixedSamplePositions(self, /) -> bool: ...
    def isStorageAllocated(self, /) -> bool: ...
    def isTextureView(self, /) -> bool: ...
    def layers(self, /) -> int: ...
    def levelOfDetailRange(self, /) -> typing.Tuple[float, float]: ...
    def levelofDetailBias(self, /) -> float: ...
    def magnificationFilter(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.Filter: ...
    def maximumAnisotropy(self, /) -> float: ...
    def maximumLevelOfDetail(self, /) -> float: ...
    def maximumMipLevels(self, /) -> int: ...
    def minMagFilters(self, /) -> typing.Tuple[PySide6.QtOpenGL.QOpenGLTexture.Filter, PySide6.QtOpenGL.QOpenGLTexture.Filter]: ...
    def minificationFilter(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.Filter: ...
    def minimumLevelOfDetail(self, /) -> float: ...
    def mipBaseLevel(self, /) -> int: ...
    def mipLevelRange(self, /) -> typing.Tuple[int, int]: ...
    def mipLevels(self, /) -> int: ...
    def mipMaxLevel(self, /) -> int: ...
    @typing.overload
    def release(self, /) -> None: ...
    @typing.overload
    def release(self, unit: int, /, reset: PySide6.QtOpenGL.QOpenGLTexture.TextureUnitReset = ...) -> None: ...
    def samples(self, /) -> int: ...
    def setAutoMipMapGenerationEnabled(self, enabled: bool, /) -> None: ...
    @typing.overload
    def setBorderColor(self, r: int, g: int, b: int, a: int, /) -> None: ...
    @typing.overload
    def setBorderColor(self, r: float, g: float, b: float, a: float, /) -> None: ...
    @typing.overload
    def setBorderColor(self, color: typing.Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, typing.Any, PySide6.QtCore.Qt.GlobalColor, int], /) -> None: ...
    def setComparisonFunction(self, function: PySide6.QtOpenGL.QOpenGLTexture.ComparisonFunction, /) -> None: ...
    def setComparisonMode(self, mode: PySide6.QtOpenGL.QOpenGLTexture.ComparisonMode, /) -> None: ...
    @typing.overload
    def setCompressedData(self, mipLevel: int, layer: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, dataSize: int, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setCompressedData(self, dataSize: int, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setCompressedData(self, mipLevel: int, layer: int, layerCount: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, dataSize: int, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setCompressedData(self, mipLevel: int, dataSize: int, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setCompressedData(self, mipLevel: int, layer: int, dataSize: int, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, image: PySide6.QtGui.QImage, /, genMipMaps: PySide6.QtOpenGL.QOpenGLTexture.MipMapGeneration = ...) -> None: ...
    @typing.overload
    def setData(self, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, mipLevel: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, mipLevel: int, layer: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, mipLevel: int, layer: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, mipLevel: int, layer: int, layerCount: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, cubeFace: PySide6.QtOpenGL.QOpenGLTexture.CubeMapFace, layerCount: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    @typing.overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, sourceFormat: PySide6.QtOpenGL.QOpenGLTexture.PixelFormat, sourceType: PySide6.QtOpenGL.QOpenGLTexture.PixelType, data: int, /, options: PySide6.QtOpenGL.QOpenGLPixelTransferOptions | None = ...) -> None: ...
    def setDepthStencilMode(self, mode: PySide6.QtOpenGL.QOpenGLTexture.DepthStencilMode, /) -> None: ...
    def setFixedSamplePositions(self, fixed: bool, /) -> None: ...
    def setFormat(self, format: PySide6.QtOpenGL.QOpenGLTexture.TextureFormat, /) -> None: ...
    def setLayers(self, layers: int, /) -> None: ...
    def setLevelOfDetailRange(self, min: float, max: float, /) -> None: ...
    def setLevelofDetailBias(self, bias: float, /) -> None: ...
    def setMagnificationFilter(self, filter: PySide6.QtOpenGL.QOpenGLTexture.Filter, /) -> None: ...
    def setMaximumAnisotropy(self, anisotropy: float, /) -> None: ...
    def setMaximumLevelOfDetail(self, value: float, /) -> None: ...
    def setMinMagFilters(self, minificationFilter: PySide6.QtOpenGL.QOpenGLTexture.Filter, magnificationFilter: PySide6.QtOpenGL.QOpenGLTexture.Filter, /) -> None: ...
    def setMinificationFilter(self, filter: PySide6.QtOpenGL.QOpenGLTexture.Filter, /) -> None: ...
    def setMinimumLevelOfDetail(self, value: float, /) -> None: ...
    def setMipBaseLevel(self, baseLevel: int, /) -> None: ...
    def setMipLevelRange(self, baseLevel: int, maxLevel: int, /) -> None: ...
    def setMipLevels(self, levels: int, /) -> None: ...
    def setMipMaxLevel(self, maxLevel: int, /) -> None: ...
    def setSamples(self, samples: int, /) -> None: ...
    def setSize(self, width: int, /, height: int = ..., depth: int = ...) -> None: ...
    @typing.overload
    def setSwizzleMask(self, component: PySide6.QtOpenGL.QOpenGLTexture.SwizzleComponent, value: PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, /) -> None: ...
    @typing.overload
    def setSwizzleMask(self, r: PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, g: PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, b: PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, a: PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue, /) -> None: ...
    @typing.overload
    def setWrapMode(self, direction: PySide6.QtOpenGL.QOpenGLTexture.CoordinateDirection, mode: PySide6.QtOpenGL.QOpenGLTexture.WrapMode, /) -> None: ...
    @typing.overload
    def setWrapMode(self, mode: PySide6.QtOpenGL.QOpenGLTexture.WrapMode, /) -> None: ...
    def swizzleMask(self, component: PySide6.QtOpenGL.QOpenGLTexture.SwizzleComponent, /) -> PySide6.QtOpenGL.QOpenGLTexture.SwizzleValue: ...
    def target(self, /) -> PySide6.QtOpenGL.QOpenGLTexture.Target: ...
    def textureId(self, /) -> int: ...
    def width(self, /) -> int: ...
    def wrapMode(self, direction: PySide6.QtOpenGL.QOpenGLTexture.CoordinateDirection, /) -> PySide6.QtOpenGL.QOpenGLTexture.WrapMode: ...


class QOpenGLTextureBlitter(Shiboken.Object):

    class Origin(enum.Enum):

        OriginBottomLeft          = ...  # 0x0
        OriginTopLeft             = ...  # 0x1


    def __init__(self, /) -> None: ...

    def bind(self, /, target: int = ...) -> None: ...
    @typing.overload
    def blit(self, texture: int, targetTransform: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, sourceOrigin: PySide6.QtOpenGL.QOpenGLTextureBlitter.Origin, /) -> None: ...
    @typing.overload
    def blit(self, texture: int, targetTransform: PySide6.QtGui.QMatrix4x4 | PySide6.QtGui.QTransform, sourceTransform: PySide6.QtGui.QMatrix3x3, /) -> None: ...
    def create(self, /) -> bool: ...
    def destroy(self, /) -> None: ...
    def isCreated(self, /) -> bool: ...
    def release(self, /) -> None: ...
    def setOpacity(self, opacity: float, /) -> None: ...
    def setRedBlueSwizzle(self, swizzle: bool, /) -> None: ...
    @staticmethod
    def sourceTransform(subTexture: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, textureSize: PySide6.QtCore.QSize, origin: PySide6.QtOpenGL.QOpenGLTextureBlitter.Origin, /) -> PySide6.QtGui.QMatrix3x3: ...
    def supportsExternalOESTarget(self, /) -> bool: ...
    def supportsRectangleTarget(self, /) -> bool: ...
    @staticmethod
    def targetTransform(target: PySide6.QtCore.QRectF | PySide6.QtCore.QRect, viewport: PySide6.QtCore.QRect, /) -> PySide6.QtGui.QMatrix4x4: ...


class QOpenGLTimeMonitor(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def create(self, /) -> bool: ...
    def destroy(self, /) -> None: ...
    def isCreated(self, /) -> bool: ...
    def isResultAvailable(self, /) -> bool: ...
    def objectIds(self, /) -> typing.List[int]: ...
    def recordSample(self, /) -> int: ...
    def reset(self, /) -> None: ...
    def sampleCount(self, /) -> int: ...
    def setSampleCount(self, sampleCount: int, /) -> None: ...
    def waitForIntervals(self, /) -> typing.List[int]: ...
    def waitForSamples(self, /) -> typing.List[int]: ...


class QOpenGLTimerQuery(PySide6.QtCore.QObject):

    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def begin(self, /) -> None: ...
    def create(self, /) -> bool: ...
    def destroy(self, /) -> None: ...
    def end(self, /) -> None: ...
    def isCreated(self, /) -> bool: ...
    def isResultAvailable(self, /) -> bool: ...
    def objectId(self, /) -> int: ...
    def recordTimestamp(self, /) -> None: ...
    def waitForResult(self, /) -> int: ...
    def waitForTimestamp(self, /) -> int: ...


class QOpenGLVersionFunctionsFactory(Shiboken.Object):

    def __init__(self, /) -> None: ...

    @staticmethod
    def get(versionProfile: PySide6.QtOpenGL.QOpenGLVersionProfile = ..., context: PySide6.QtGui.QOpenGLContext | None = ...) -> PySide6.QtOpenGL.QAbstractOpenGLFunctions: ...


class QOpenGLVersionProfile(Shiboken.Object):

    @typing.overload
    def __init__(self, /) -> None: ...
    @typing.overload
    def __init__(self, other: PySide6.QtOpenGL.QOpenGLVersionProfile, /) -> None: ...
    @typing.overload
    def __init__(self, format: PySide6.QtGui.QSurfaceFormat | PySide6.QtGui.QSurfaceFormat.FormatOption, /) -> None: ...

    def __copy__(self, /) -> typing.Self: ...
    def __eq__(self, rhs: PySide6.QtOpenGL.QOpenGLVersionProfile, /) -> bool: ...
    def __hash__(self, /) -> int: ...
    def __ne__(self, rhs: PySide6.QtOpenGL.QOpenGLVersionProfile, /) -> bool: ...
    def __repr__(self, /) -> str: ...
    def hasProfiles(self, /) -> bool: ...
    def isLegacyVersion(self, /) -> bool: ...
    def isValid(self, /) -> bool: ...
    def profile(self, /) -> PySide6.QtGui.QSurfaceFormat.OpenGLContextProfile: ...
    def setProfile(self, profile: PySide6.QtGui.QSurfaceFormat.OpenGLContextProfile, /) -> None: ...
    def setVersion(self, majorVersion: int, minorVersion: int, /) -> None: ...
    def version(self, /) -> typing.Tuple[int, int]: ...


class QOpenGLVertexArrayObject(PySide6.QtCore.QObject):

    class Binder(Shiboken.Object):

        def __init__(self, v: PySide6.QtOpenGL.QOpenGLVertexArrayObject, /) -> None: ...

        def __enter__(self, /) -> PySide6.QtOpenGL.QOpenGLVertexArrayObject.Binder: ...
        def __exit__(self, arg__1: object, arg__2: object, arg__3: object, /) -> None: ...
        def rebind(self, /) -> None: ...
        def release(self, /) -> None: ...


    def __init__(self, /, parent: PySide6.QtCore.QObject | None = ...) -> None: ...

    def bind(self, /) -> None: ...
    def create(self, /) -> bool: ...
    def destroy(self, /) -> None: ...
    def isCreated(self, /) -> bool: ...
    def objectId(self, /) -> int: ...
    def release(self, /) -> None: ...


class QOpenGLWindow(PySide6.QtGui.QPaintDeviceWindow):

    frameSwapped             : typing.ClassVar[Signal] = ... # frameSwapped()

    class UpdateBehavior(enum.Enum):

        NoPartialUpdate           = ...  # 0x0
        PartialUpdateBlit         = ...  # 0x1
        PartialUpdateBlend        = ...  # 0x2


    @typing.overload
    def __init__(self, shareContext: PySide6.QtGui.QOpenGLContext, /, updateBehavior: PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior = ..., parent: PySide6.QtGui.QWindow | None = ...) -> None: ...
    @typing.overload
    def __init__(self, /, updateBehavior: PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior = ..., parent: PySide6.QtGui.QWindow | None = ...) -> None: ...

    def context(self, /) -> PySide6.QtGui.QOpenGLContext: ...
    def defaultFramebufferObject(self, /) -> int: ...
    def doneCurrent(self, /) -> None: ...
    def grabFramebuffer(self, /) -> PySide6.QtGui.QImage: ...
    def initializeGL(self, /) -> None: ...
    def isValid(self, /) -> bool: ...
    def makeCurrent(self, /) -> None: ...
    def metric(self, metric: PySide6.QtGui.QPaintDevice.PaintDeviceMetric, /) -> int: ...
    def paintEvent(self, event: PySide6.QtGui.QPaintEvent, /) -> None: ...
    def paintGL(self, /) -> None: ...
    def paintOverGL(self, /) -> None: ...
    def paintUnderGL(self, /) -> None: ...
    def redirected(self, arg__1: PySide6.QtCore.QPoint, /) -> PySide6.QtGui.QPaintDevice: ...
    def resizeEvent(self, event: PySide6.QtGui.QResizeEvent, /) -> None: ...
    def resizeGL(self, w: int, h: int, /) -> None: ...
    def shareContext(self, /) -> PySide6.QtGui.QOpenGLContext: ...
    def updateBehavior(self, /) -> PySide6.QtOpenGL.QOpenGLWindow.UpdateBehavior: ...


# eof
