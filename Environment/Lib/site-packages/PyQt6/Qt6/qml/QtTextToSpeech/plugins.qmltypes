import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qtexttospeech_qmltypes_p.h"
        name: "QTextToSpeech"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtTextToSpeech/TextToSpeech 6.0"]
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "State"
            values: ["Ready", "Speaking", "Paused", "Error"]
        }
        Enum {
            name: "ErrorReason"
            values: [
                "NoError",
                "Initialization",
                "Configuration",
                "Input",
                "Playback"
            ]
        }
        Enum {
            name: "BoundaryHint"
            values: ["Default", "Immediate", "Word", "Sentence"]
        }
        Property {
            name: "engine"
            type: "QString"
            read: "engine"
            write: "setEngine"
            notify: "engineChanged"
            index: 0
        }
        Property {
            name: "state"
            type: "State"
            read: "state"
            notify: "stateChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "volume"
            type: "double"
            read: "volume"
            write: "setVolume"
            notify: "volumeChanged"
            index: 2
        }
        Property {
            name: "rate"
            type: "double"
            read: "rate"
            write: "setRate"
            notify: "rateChanged"
            index: 3
        }
        Property {
            name: "pitch"
            type: "double"
            read: "pitch"
            write: "setPitch"
            notify: "pitchChanged"
            index: 4
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            notify: "localeChanged"
            index: 5
        }
        Property {
            name: "voice"
            type: "QVoice"
            read: "voice"
            write: "setVoice"
            notify: "voiceChanged"
            index: 6
        }
        Signal {
            name: "engineChanged"
            Parameter { name: "engine"; type: "QString" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "QTextToSpeech::State" }
        }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "QTextToSpeech::ErrorReason" }
            Parameter { name: "errorString"; type: "QString" }
        }
        Signal {
            name: "localeChanged"
            Parameter { name: "locale"; type: "QLocale" }
        }
        Signal {
            name: "rateChanged"
            Parameter { name: "rate"; type: "double" }
        }
        Signal {
            name: "pitchChanged"
            Parameter { name: "pitch"; type: "double" }
        }
        Signal {
            name: "volumeChanged"
            Parameter { name: "volume"; type: "double" }
        }
        Signal {
            name: "voiceChanged"
            Parameter { name: "voice"; type: "QVoice" }
        }
        Method {
            name: "say"
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "stop"
            Parameter { name: "boundaryHint"; type: "QTextToSpeech::BoundaryHint" }
        }
        Method { name: "stop" }
        Method {
            name: "pause"
            Parameter { name: "boundaryHint"; type: "QTextToSpeech::BoundaryHint" }
        }
        Method { name: "pause" }
        Method { name: "resume" }
        Method {
            name: "setLocale"
            Parameter { name: "locale"; type: "QLocale" }
        }
        Method {
            name: "setRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method {
            name: "setPitch"
            Parameter { name: "pitch"; type: "double" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method {
            name: "setVoice"
            Parameter { name: "voice"; type: "QVoice" }
        }
        Method {
            name: "setEngine"
            type: "bool"
            Parameter { name: "engine"; type: "QString" }
            Parameter { name: "params"; type: "QVariantMap" }
        }
        Method {
            name: "setEngine"
            type: "bool"
            Parameter { name: "engine"; type: "QString" }
        }
        Method { name: "errorReason"; type: "QTextToSpeech::ErrorReason" }
        Method { name: "errorString"; type: "QString" }
        Method { name: "availableLocales"; type: "QLocale"; isList: true }
        Method { name: "availableVoices"; type: "QVoice"; isList: true }
        Method { name: "availableEngines"; type: "QStringList" }
    }
    Component {
        file: "qtexttospeech_qmltypes_p.h"
        name: "QVoice"
        accessSemantics: "value"
        exports: ["QtTextToSpeech/voice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Gender"
            values: ["Male", "Female", "Unknown"]
        }
        Enum {
            name: "Age"
            values: ["Child", "Teenager", "Adult", "Senior", "Other"]
        }
        Property { name: "name"; type: "QString"; read: "name"; index: 0; isReadonly: true }
        Property { name: "gender"; type: "Gender"; read: "gender"; index: 1; isReadonly: true }
        Property { name: "age"; type: "Age"; read: "age"; index: 2; isReadonly: true }
        Property { name: "locale"; type: "QLocale"; read: "locale"; index: 3; isReadonly: true }
    }
    Component {
        file: "qtexttospeech_qmltypes_p.h"
        name: "QVoice"
        accessSemantics: "value"
        exports: ["QtTextToSpeech/Voice 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Gender"
            values: ["Male", "Female", "Unknown"]
        }
        Enum {
            name: "Age"
            values: ["Child", "Teenager", "Adult", "Senior", "Other"]
        }
        Property { name: "name"; type: "QString"; read: "name"; index: 0; isReadonly: true }
        Property { name: "gender"; type: "Gender"; read: "gender"; index: 1; isReadonly: true }
        Property { name: "age"; type: "Age"; read: "age"; index: 2; isReadonly: true }
        Property { name: "locale"; type: "QLocale"; read: "locale"; index: 3; isReadonly: true }
    }
}
